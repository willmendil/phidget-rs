/* automatically generated by rust-bindgen 0.69.4 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const PUNK_BOOL: u32 = 2;
pub const PUNK_DBL : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const PUNK_FLT: f64 = 1000000000000000000000000000000.0;
pub const PFALSE: u32 = 0;
pub const PTRUE: u32 = 1;
pub const PRIphid: &[u8; 2] = b"P\0";
pub const PHIDGET_SERIALNUMBER_ANY: i32 = -1;
pub const PHIDGET_HUBPORT_ANY: i32 = -1;
pub const PHIDGET_CHANNEL_ANY: i32 = -1;
pub const PHIDGET_TIMEOUT_INFINITE: u32 = 0;
pub const PHIDGET_TIMEOUT_DEFAULT: u32 = 1000;
pub const PHIDGET_HUBPORTSPEED_AUTO: u32 = 0;
pub const PHIDGETSERVER_AUTHREQUIRED: u32 = 1;
pub const IR_RAWDATA_LONGSPACE: u32 = 4294967295;
pub const IR_MAX_CODE_BIT_COUNT: u32 = 128;
pub const IR_MAX_CODE_STR_LENGTH: u32 = 33;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __gnuc_va_list = __builtin_va_list;
pub type max_align_t = f64;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    const UNINIT: ::std::mem::MaybeUninit<_div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_DOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_FLOAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LONGDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    const UNINIT: ::std::mem::MaybeUninit<_LDBL12> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub const Phidget_EncoderIOMode_ENCODER_IO_MODE_PUSH_PULL: Phidget_EncoderIOMode = 1;
pub const Phidget_EncoderIOMode_ENCODER_IO_MODE_LINE_DRIVER_2K2: Phidget_EncoderIOMode = 2;
pub const Phidget_EncoderIOMode_ENCODER_IO_MODE_LINE_DRIVER_10K: Phidget_EncoderIOMode = 3;
pub const Phidget_EncoderIOMode_ENCODER_IO_MODE_OPEN_COLLECTOR_2K2: Phidget_EncoderIOMode = 4;
pub const Phidget_EncoderIOMode_ENCODER_IO_MODE_OPEN_COLLECTOR_10K: Phidget_EncoderIOMode = 5;
pub type Phidget_EncoderIOMode = ::std::os::raw::c_int;
pub const PhidgetReturnCode_EPHIDGET_OK: PhidgetReturnCode = 0;
pub const PhidgetReturnCode_EPHIDGET_PERM: PhidgetReturnCode = 1;
pub const PhidgetReturnCode_EPHIDGET_NOENT: PhidgetReturnCode = 2;
pub const PhidgetReturnCode_EPHIDGET_TIMEOUT: PhidgetReturnCode = 3;
pub const PhidgetReturnCode_EPHIDGET_KEEPALIVE: PhidgetReturnCode = 58;
pub const PhidgetReturnCode_EPHIDGET_INTERRUPTED: PhidgetReturnCode = 4;
pub const PhidgetReturnCode_EPHIDGET_IO: PhidgetReturnCode = 5;
pub const PhidgetReturnCode_EPHIDGET_NOMEMORY: PhidgetReturnCode = 6;
pub const PhidgetReturnCode_EPHIDGET_ACCESS: PhidgetReturnCode = 7;
pub const PhidgetReturnCode_EPHIDGET_FAULT: PhidgetReturnCode = 8;
pub const PhidgetReturnCode_EPHIDGET_BUSY: PhidgetReturnCode = 9;
pub const PhidgetReturnCode_EPHIDGET_EXIST: PhidgetReturnCode = 10;
pub const PhidgetReturnCode_EPHIDGET_NOTDIR: PhidgetReturnCode = 11;
pub const PhidgetReturnCode_EPHIDGET_ISDIR: PhidgetReturnCode = 12;
pub const PhidgetReturnCode_EPHIDGET_INVALID: PhidgetReturnCode = 13;
pub const PhidgetReturnCode_EPHIDGET_NFILE: PhidgetReturnCode = 14;
pub const PhidgetReturnCode_EPHIDGET_MFILE: PhidgetReturnCode = 15;
pub const PhidgetReturnCode_EPHIDGET_NOSPC: PhidgetReturnCode = 16;
pub const PhidgetReturnCode_EPHIDGET_FBIG: PhidgetReturnCode = 17;
pub const PhidgetReturnCode_EPHIDGET_ROFS: PhidgetReturnCode = 18;
pub const PhidgetReturnCode_EPHIDGET_RO: PhidgetReturnCode = 19;
pub const PhidgetReturnCode_EPHIDGET_UNSUPPORTED: PhidgetReturnCode = 20;
pub const PhidgetReturnCode_EPHIDGET_INVALIDARG: PhidgetReturnCode = 21;
pub const PhidgetReturnCode_EPHIDGET_AGAIN: PhidgetReturnCode = 22;
pub const PhidgetReturnCode_EPHIDGET_NOTEMPTY: PhidgetReturnCode = 26;
pub const PhidgetReturnCode_EPHIDGET_UNEXPECTED: PhidgetReturnCode = 28;
pub const PhidgetReturnCode_EPHIDGET_DUPLICATE: PhidgetReturnCode = 27;
pub const PhidgetReturnCode_EPHIDGET_BADPASSWORD: PhidgetReturnCode = 37;
pub const PhidgetReturnCode_EPHIDGET_NETUNAVAIL: PhidgetReturnCode = 45;
pub const PhidgetReturnCode_EPHIDGET_CONNREF: PhidgetReturnCode = 35;
pub const PhidgetReturnCode_EPHIDGET_CONNRESET: PhidgetReturnCode = 46;
pub const PhidgetReturnCode_EPHIDGET_HOSTUNREACH: PhidgetReturnCode = 48;
pub const PhidgetReturnCode_EPHIDGET_NODEV: PhidgetReturnCode = 40;
pub const PhidgetReturnCode_EPHIDGET_WRONGDEVICE: PhidgetReturnCode = 50;
pub const PhidgetReturnCode_EPHIDGET_PIPE: PhidgetReturnCode = 41;
pub const PhidgetReturnCode_EPHIDGET_RESOLV: PhidgetReturnCode = 44;
pub const PhidgetReturnCode_EPHIDGET_UNKNOWNVAL: PhidgetReturnCode = 51;
pub const PhidgetReturnCode_EPHIDGET_NOTATTACHED: PhidgetReturnCode = 52;
pub const PhidgetReturnCode_EPHIDGET_INVALIDPACKET: PhidgetReturnCode = 53;
pub const PhidgetReturnCode_EPHIDGET_2BIG: PhidgetReturnCode = 54;
pub const PhidgetReturnCode_EPHIDGET_BADVERSION: PhidgetReturnCode = 55;
pub const PhidgetReturnCode_EPHIDGET_CLOSED: PhidgetReturnCode = 56;
pub const PhidgetReturnCode_EPHIDGET_NOTCONFIGURED: PhidgetReturnCode = 57;
pub const PhidgetReturnCode_EPHIDGET_EOF: PhidgetReturnCode = 31;
pub const PhidgetReturnCode_EPHIDGET_FAILSAFE: PhidgetReturnCode = 59;
pub const PhidgetReturnCode_EPHIDGET_UNKNOWNVALHIGH: PhidgetReturnCode = 60;
pub const PhidgetReturnCode_EPHIDGET_UNKNOWNVALLOW: PhidgetReturnCode = 61;
pub const PhidgetReturnCode_EPHIDGET_BADPOWER: PhidgetReturnCode = 62;
pub const PhidgetReturnCode_EPHIDGET_POWERCYCLE: PhidgetReturnCode = 63;
pub const PhidgetReturnCode_EPHIDGET_HALLSENSOR: PhidgetReturnCode = 64;
pub const PhidgetReturnCode_EPHIDGET_BADCURRENT: PhidgetReturnCode = 65;
pub type PhidgetReturnCode = ::std::os::raw::c_int;
pub const Phidget_ErrorEventCode_EEPHIDGET_BADVERSION: Phidget_ErrorEventCode = 1;
pub const Phidget_ErrorEventCode_EEPHIDGET_BUSY: Phidget_ErrorEventCode = 2;
pub const Phidget_ErrorEventCode_EEPHIDGET_NETWORK: Phidget_ErrorEventCode = 3;
pub const Phidget_ErrorEventCode_EEPHIDGET_DISPATCH: Phidget_ErrorEventCode = 4;
pub const Phidget_ErrorEventCode_EEPHIDGET_FAILURE: Phidget_ErrorEventCode = 5;
pub const Phidget_ErrorEventCode_EEPHIDGET_OK: Phidget_ErrorEventCode = 4096;
pub const Phidget_ErrorEventCode_EEPHIDGET_OVERRUN: Phidget_ErrorEventCode = 4098;
pub const Phidget_ErrorEventCode_EEPHIDGET_PACKETLOST: Phidget_ErrorEventCode = 4099;
pub const Phidget_ErrorEventCode_EEPHIDGET_WRAP: Phidget_ErrorEventCode = 4100;
pub const Phidget_ErrorEventCode_EEPHIDGET_OVERTEMP: Phidget_ErrorEventCode = 4101;
pub const Phidget_ErrorEventCode_EEPHIDGET_OVERCURRENT: Phidget_ErrorEventCode = 4102;
pub const Phidget_ErrorEventCode_EEPHIDGET_OUTOFRANGE: Phidget_ErrorEventCode = 4103;
pub const Phidget_ErrorEventCode_EEPHIDGET_BADPOWER: Phidget_ErrorEventCode = 4104;
pub const Phidget_ErrorEventCode_EEPHIDGET_SATURATION: Phidget_ErrorEventCode = 4105;
pub const Phidget_ErrorEventCode_EEPHIDGET_OVERVOLTAGE: Phidget_ErrorEventCode = 4107;
pub const Phidget_ErrorEventCode_EEPHIDGET_FAILSAFE: Phidget_ErrorEventCode = 4108;
pub const Phidget_ErrorEventCode_EEPHIDGET_VOLTAGEERROR: Phidget_ErrorEventCode = 4109;
pub const Phidget_ErrorEventCode_EEPHIDGET_ENERGYDUMP: Phidget_ErrorEventCode = 4110;
pub const Phidget_ErrorEventCode_EEPHIDGET_MOTORSTALL: Phidget_ErrorEventCode = 4111;
pub const Phidget_ErrorEventCode_EEPHIDGET_INVALIDSTATE: Phidget_ErrorEventCode = 4112;
pub const Phidget_ErrorEventCode_EEPHIDGET_BADCONNECTION: Phidget_ErrorEventCode = 4113;
pub const Phidget_ErrorEventCode_EEPHIDGET_OUTOFRANGEHIGH: Phidget_ErrorEventCode = 4114;
pub const Phidget_ErrorEventCode_EEPHIDGET_OUTOFRANGELOW: Phidget_ErrorEventCode = 4115;
pub const Phidget_ErrorEventCode_EEPHIDGET_FAULT: Phidget_ErrorEventCode = 4116;
pub const Phidget_ErrorEventCode_EEPHIDGET_ESTOP: Phidget_ErrorEventCode = 4117;
pub type Phidget_ErrorEventCode = ::std::os::raw::c_int;
pub const Phidget_DeviceID_PHIDID_NOTHING: Phidget_DeviceID = 0;
pub const Phidget_DeviceID_PHIDID_UNKNOWN: Phidget_DeviceID = 125;
pub const Phidget_DeviceID_PHIDID_DIGITALINPUT_PORT: Phidget_DeviceID = 95;
pub const Phidget_DeviceID_PHIDID_DIGITALOUTPUT_PORT: Phidget_DeviceID = 96;
pub const Phidget_DeviceID_PHIDID_VOLTAGEINPUT_PORT: Phidget_DeviceID = 97;
pub const Phidget_DeviceID_PHIDID_VOLTAGERATIOINPUT_PORT: Phidget_DeviceID = 98;
pub const Phidget_DeviceID_PHIDID_DICTIONARY: Phidget_DeviceID = 111;
pub const Phidget_DeviceID_PHIDID_1000: Phidget_DeviceID = 2;
pub const Phidget_DeviceID_PHIDID_1001: Phidget_DeviceID = 3;
pub const Phidget_DeviceID_PHIDID_1002: Phidget_DeviceID = 4;
pub const Phidget_DeviceID_PHIDID_1008: Phidget_DeviceID = 5;
pub const Phidget_DeviceID_PHIDID_1010_1013_1018_1019: Phidget_DeviceID = 6;
pub const Phidget_DeviceID_PHIDID_1011: Phidget_DeviceID = 7;
pub const Phidget_DeviceID_PHIDID_1012: Phidget_DeviceID = 8;
pub const Phidget_DeviceID_PHIDID_1014: Phidget_DeviceID = 9;
pub const Phidget_DeviceID_PHIDID_1015: Phidget_DeviceID = 10;
pub const Phidget_DeviceID_PHIDID_1016: Phidget_DeviceID = 11;
pub const Phidget_DeviceID_PHIDID_1017: Phidget_DeviceID = 12;
pub const Phidget_DeviceID_PHIDID_1023: Phidget_DeviceID = 13;
pub const Phidget_DeviceID_PHIDID_1024: Phidget_DeviceID = 14;
pub const Phidget_DeviceID_PHIDID_1030: Phidget_DeviceID = 15;
pub const Phidget_DeviceID_PHIDID_1031: Phidget_DeviceID = 16;
pub const Phidget_DeviceID_PHIDID_1032: Phidget_DeviceID = 17;
pub const Phidget_DeviceID_PHIDID_1040: Phidget_DeviceID = 18;
pub const Phidget_DeviceID_PHIDID_1041: Phidget_DeviceID = 19;
pub const Phidget_DeviceID_PHIDID_1042: Phidget_DeviceID = 20;
pub const Phidget_DeviceID_PHIDID_1043: Phidget_DeviceID = 21;
pub const Phidget_DeviceID_PHIDID_1044: Phidget_DeviceID = 22;
pub const Phidget_DeviceID_PHIDID_1045: Phidget_DeviceID = 23;
pub const Phidget_DeviceID_PHIDID_1046: Phidget_DeviceID = 24;
pub const Phidget_DeviceID_PHIDID_1047: Phidget_DeviceID = 25;
pub const Phidget_DeviceID_PHIDID_1048: Phidget_DeviceID = 26;
pub const Phidget_DeviceID_PHIDID_1049: Phidget_DeviceID = 27;
pub const Phidget_DeviceID_PHIDID_1051: Phidget_DeviceID = 28;
pub const Phidget_DeviceID_PHIDID_1052: Phidget_DeviceID = 29;
pub const Phidget_DeviceID_PHIDID_1053: Phidget_DeviceID = 30;
pub const Phidget_DeviceID_PHIDID_1054: Phidget_DeviceID = 31;
pub const Phidget_DeviceID_PHIDID_1055: Phidget_DeviceID = 32;
pub const Phidget_DeviceID_PHIDID_1056: Phidget_DeviceID = 33;
pub const Phidget_DeviceID_PHIDID_1057: Phidget_DeviceID = 34;
pub const Phidget_DeviceID_PHIDID_1058: Phidget_DeviceID = 35;
pub const Phidget_DeviceID_PHIDID_1059: Phidget_DeviceID = 36;
pub const Phidget_DeviceID_PHIDID_1060: Phidget_DeviceID = 37;
pub const Phidget_DeviceID_PHIDID_1061: Phidget_DeviceID = 38;
pub const Phidget_DeviceID_PHIDID_1062: Phidget_DeviceID = 39;
pub const Phidget_DeviceID_PHIDID_1063: Phidget_DeviceID = 40;
pub const Phidget_DeviceID_PHIDID_1064: Phidget_DeviceID = 41;
pub const Phidget_DeviceID_PHIDID_1065: Phidget_DeviceID = 42;
pub const Phidget_DeviceID_PHIDID_1066: Phidget_DeviceID = 43;
pub const Phidget_DeviceID_PHIDID_1067: Phidget_DeviceID = 44;
pub const Phidget_DeviceID_PHIDID_1202_1203: Phidget_DeviceID = 45;
pub const Phidget_DeviceID_PHIDID_1204: Phidget_DeviceID = 46;
pub const Phidget_DeviceID_PHIDID_1215__1218: Phidget_DeviceID = 47;
pub const Phidget_DeviceID_PHIDID_1219__1222: Phidget_DeviceID = 48;
pub const Phidget_DeviceID_PHIDID_ADP1000: Phidget_DeviceID = 49;
pub const Phidget_DeviceID_PHIDID_DAQ1000: Phidget_DeviceID = 51;
pub const Phidget_DeviceID_PHIDID_DAQ1200: Phidget_DeviceID = 52;
pub const Phidget_DeviceID_PHIDID_DAQ1300: Phidget_DeviceID = 53;
pub const Phidget_DeviceID_PHIDID_DAQ1301: Phidget_DeviceID = 54;
pub const Phidget_DeviceID_PHIDID_DAQ1400: Phidget_DeviceID = 55;
pub const Phidget_DeviceID_PHIDID_DAQ1500: Phidget_DeviceID = 56;
pub const Phidget_DeviceID_PHIDID_DCC1000: Phidget_DeviceID = 57;
pub const Phidget_DeviceID_PHIDID_DCC1001: Phidget_DeviceID = 110;
pub const Phidget_DeviceID_PHIDID_DCC1002: Phidget_DeviceID = 117;
pub const Phidget_DeviceID_PHIDID_DCC1003: Phidget_DeviceID = 120;
pub const Phidget_DeviceID_PHIDID_DCC1100: Phidget_DeviceID = 108;
pub const Phidget_DeviceID_PHIDID_DST1000: Phidget_DeviceID = 58;
pub const Phidget_DeviceID_PHIDID_DST1001: Phidget_DeviceID = 121;
pub const Phidget_DeviceID_PHIDID_DST1002: Phidget_DeviceID = 126;
pub const Phidget_DeviceID_PHIDID_DST1200: Phidget_DeviceID = 59;
pub const Phidget_DeviceID_PHIDID_ENC1000: Phidget_DeviceID = 60;
pub const Phidget_DeviceID_PHIDID_ENC1001: Phidget_DeviceID = 155;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_SPI: Phidget_DeviceID = 104;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_STM32F0: Phidget_DeviceID = 102;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_STM32F3: Phidget_DeviceID = 145;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_STM32G0: Phidget_DeviceID = 143;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_STM8S: Phidget_DeviceID = 103;
pub const Phidget_DeviceID_PHIDID_FIRMWARE_UPGRADE_USB: Phidget_DeviceID = 101;
pub const Phidget_DeviceID_PHIDID_HIN1000: Phidget_DeviceID = 61;
pub const Phidget_DeviceID_PHIDID_HIN1001: Phidget_DeviceID = 62;
pub const Phidget_DeviceID_PHIDID_HIN1100: Phidget_DeviceID = 63;
pub const Phidget_DeviceID_PHIDID_HIN1101: Phidget_DeviceID = 109;
pub const Phidget_DeviceID_PHIDID_HUB0000: Phidget_DeviceID = 64;
pub const Phidget_DeviceID_PHIDID_HUB0001: Phidget_DeviceID = 142;
pub const Phidget_DeviceID_PHIDID_HUB0002: Phidget_DeviceID = 147;
pub const Phidget_DeviceID_PHIDID_HUB0004: Phidget_DeviceID = 67;
pub const Phidget_DeviceID_PHIDID_HUB0007: Phidget_DeviceID = 148;
pub const Phidget_DeviceID_PHIDID_HUB5000: Phidget_DeviceID = 123;
pub const Phidget_DeviceID_PHIDID_HUM1000: Phidget_DeviceID = 69;
pub const Phidget_DeviceID_PHIDID_HUM1001: Phidget_DeviceID = 127;
pub const Phidget_DeviceID_PHIDID_HUM1100: Phidget_DeviceID = 136;
pub const Phidget_DeviceID_PHIDID_INTERFACEKIT_4_8_8: Phidget_DeviceID = 1;
pub const Phidget_DeviceID_PHIDID_LCD1100: Phidget_DeviceID = 70;
pub const Phidget_DeviceID_PHIDID_LED1000: Phidget_DeviceID = 71;
pub const Phidget_DeviceID_PHIDID_LUX1000: Phidget_DeviceID = 72;
pub const Phidget_DeviceID_PHIDID_MOT0100: Phidget_DeviceID = 146;
pub const Phidget_DeviceID_PHIDID_MOT0109: Phidget_DeviceID = 140;
pub const Phidget_DeviceID_PHIDID_MOT0110: Phidget_DeviceID = 141;
pub const Phidget_DeviceID_PHIDID_MOT1100: Phidget_DeviceID = 73;
pub const Phidget_DeviceID_PHIDID_MOT1101: Phidget_DeviceID = 74;
pub const Phidget_DeviceID_PHIDID_MOT1102: Phidget_DeviceID = 137;
pub const Phidget_DeviceID_PHIDID_OUT1000: Phidget_DeviceID = 75;
pub const Phidget_DeviceID_PHIDID_OUT1001: Phidget_DeviceID = 76;
pub const Phidget_DeviceID_PHIDID_OUT1002: Phidget_DeviceID = 77;
pub const Phidget_DeviceID_PHIDID_OUT1100: Phidget_DeviceID = 78;
pub const Phidget_DeviceID_PHIDID_PRE1000: Phidget_DeviceID = 79;
pub const Phidget_DeviceID_PHIDID_RCC0004: Phidget_DeviceID = 124;
pub const Phidget_DeviceID_PHIDID_RCC1000: Phidget_DeviceID = 80;
pub const Phidget_DeviceID_PHIDID_REL1000: Phidget_DeviceID = 81;
pub const Phidget_DeviceID_PHIDID_REL1100: Phidget_DeviceID = 82;
pub const Phidget_DeviceID_PHIDID_REL1101: Phidget_DeviceID = 83;
pub const Phidget_DeviceID_PHIDID_SAF1000: Phidget_DeviceID = 84;
pub const Phidget_DeviceID_PHIDID_SND1000: Phidget_DeviceID = 85;
pub const Phidget_DeviceID_PHIDID_STC1000: Phidget_DeviceID = 86;
pub const Phidget_DeviceID_PHIDID_STC1001: Phidget_DeviceID = 115;
pub const Phidget_DeviceID_PHIDID_STC1002: Phidget_DeviceID = 118;
pub const Phidget_DeviceID_PHIDID_STC1003: Phidget_DeviceID = 119;
pub const Phidget_DeviceID_PHIDID_STC1005: Phidget_DeviceID = 149;
pub const Phidget_DeviceID_PHIDID_TMP1000: Phidget_DeviceID = 87;
pub const Phidget_DeviceID_PHIDID_TMP1100: Phidget_DeviceID = 88;
pub const Phidget_DeviceID_PHIDID_TMP1101: Phidget_DeviceID = 89;
pub const Phidget_DeviceID_PHIDID_TMP1200: Phidget_DeviceID = 90;
pub const Phidget_DeviceID_PHIDID_VCP1000: Phidget_DeviceID = 92;
pub const Phidget_DeviceID_PHIDID_VCP1001: Phidget_DeviceID = 93;
pub const Phidget_DeviceID_PHIDID_VCP1002: Phidget_DeviceID = 94;
pub const Phidget_DeviceID_PHIDID_VCP1100: Phidget_DeviceID = 105;
pub type Phidget_DeviceID = ::std::os::raw::c_int;
pub const Phidget_LogLevel_PHIDGET_LOG_CRITICAL: Phidget_LogLevel = 1;
pub const Phidget_LogLevel_PHIDGET_LOG_ERROR: Phidget_LogLevel = 2;
pub const Phidget_LogLevel_PHIDGET_LOG_WARNING: Phidget_LogLevel = 3;
pub const Phidget_LogLevel_PHIDGET_LOG_INFO: Phidget_LogLevel = 4;
pub const Phidget_LogLevel_PHIDGET_LOG_DEBUG: Phidget_LogLevel = 5;
pub const Phidget_LogLevel_PHIDGET_LOG_VERBOSE: Phidget_LogLevel = 6;
pub type Phidget_LogLevel = ::std::os::raw::c_int;
pub const Phidget_DeviceClass_PHIDCLASS_NOTHING: Phidget_DeviceClass = 0;
pub const Phidget_DeviceClass_PHIDCLASS_ACCELEROMETER: Phidget_DeviceClass = 1;
pub const Phidget_DeviceClass_PHIDCLASS_ADVANCEDSERVO: Phidget_DeviceClass = 2;
pub const Phidget_DeviceClass_PHIDCLASS_ANALOG: Phidget_DeviceClass = 3;
pub const Phidget_DeviceClass_PHIDCLASS_BRIDGE: Phidget_DeviceClass = 4;
pub const Phidget_DeviceClass_PHIDCLASS_DATAADAPTER: Phidget_DeviceClass = 25;
pub const Phidget_DeviceClass_PHIDCLASS_DICTIONARY: Phidget_DeviceClass = 24;
pub const Phidget_DeviceClass_PHIDCLASS_ENCODER: Phidget_DeviceClass = 5;
pub const Phidget_DeviceClass_PHIDCLASS_FIRMWAREUPGRADE: Phidget_DeviceClass = 23;
pub const Phidget_DeviceClass_PHIDCLASS_FREQUENCYCOUNTER: Phidget_DeviceClass = 6;
pub const Phidget_DeviceClass_PHIDCLASS_GENERIC: Phidget_DeviceClass = 22;
pub const Phidget_DeviceClass_PHIDCLASS_GPS: Phidget_DeviceClass = 7;
pub const Phidget_DeviceClass_PHIDCLASS_HUB: Phidget_DeviceClass = 8;
pub const Phidget_DeviceClass_PHIDCLASS_INTERFACEKIT: Phidget_DeviceClass = 9;
pub const Phidget_DeviceClass_PHIDCLASS_IR: Phidget_DeviceClass = 10;
pub const Phidget_DeviceClass_PHIDCLASS_LED: Phidget_DeviceClass = 11;
pub const Phidget_DeviceClass_PHIDCLASS_MESHDONGLE: Phidget_DeviceClass = 12;
pub const Phidget_DeviceClass_PHIDCLASS_MOTORCONTROL: Phidget_DeviceClass = 13;
pub const Phidget_DeviceClass_PHIDCLASS_PHSENSOR: Phidget_DeviceClass = 14;
pub const Phidget_DeviceClass_PHIDCLASS_RFID: Phidget_DeviceClass = 15;
pub const Phidget_DeviceClass_PHIDCLASS_SERVO: Phidget_DeviceClass = 16;
pub const Phidget_DeviceClass_PHIDCLASS_SPATIAL: Phidget_DeviceClass = 17;
pub const Phidget_DeviceClass_PHIDCLASS_STEPPER: Phidget_DeviceClass = 18;
pub const Phidget_DeviceClass_PHIDCLASS_TEMPERATURESENSOR: Phidget_DeviceClass = 19;
pub const Phidget_DeviceClass_PHIDCLASS_TEXTLCD: Phidget_DeviceClass = 20;
pub const Phidget_DeviceClass_PHIDCLASS_VINT: Phidget_DeviceClass = 21;
pub type Phidget_DeviceClass = ::std::os::raw::c_int;
pub const Phidget_ChannelClass_PHIDCHCLASS_NOTHING: Phidget_ChannelClass = 0;
pub const Phidget_ChannelClass_PHIDCHCLASS_ACCELEROMETER: Phidget_ChannelClass = 1;
pub const Phidget_ChannelClass_PHIDCHCLASS_BLDCMOTOR: Phidget_ChannelClass = 35;
pub const Phidget_ChannelClass_PHIDCHCLASS_CAPACITIVETOUCH: Phidget_ChannelClass = 14;
pub const Phidget_ChannelClass_PHIDCHCLASS_CURRENTINPUT: Phidget_ChannelClass = 2;
pub const Phidget_ChannelClass_PHIDCHCLASS_CURRENTOUTPUT: Phidget_ChannelClass = 38;
pub const Phidget_ChannelClass_PHIDCHCLASS_DATAADAPTER: Phidget_ChannelClass = 3;
pub const Phidget_ChannelClass_PHIDCHCLASS_DCMOTOR: Phidget_ChannelClass = 4;
pub const Phidget_ChannelClass_PHIDCHCLASS_DICTIONARY: Phidget_ChannelClass = 36;
pub const Phidget_ChannelClass_PHIDCHCLASS_DIGITALINPUT: Phidget_ChannelClass = 5;
pub const Phidget_ChannelClass_PHIDCHCLASS_DIGITALOUTPUT: Phidget_ChannelClass = 6;
pub const Phidget_ChannelClass_PHIDCHCLASS_DISTANCESENSOR: Phidget_ChannelClass = 7;
pub const Phidget_ChannelClass_PHIDCHCLASS_ENCODER: Phidget_ChannelClass = 8;
pub const Phidget_ChannelClass_PHIDCHCLASS_FIRMWAREUPGRADE: Phidget_ChannelClass = 32;
pub const Phidget_ChannelClass_PHIDCHCLASS_FREQUENCYCOUNTER: Phidget_ChannelClass = 9;
pub const Phidget_ChannelClass_PHIDCHCLASS_GENERIC: Phidget_ChannelClass = 33;
pub const Phidget_ChannelClass_PHIDCHCLASS_GPS: Phidget_ChannelClass = 10;
pub const Phidget_ChannelClass_PHIDCHCLASS_GYROSCOPE: Phidget_ChannelClass = 12;
pub const Phidget_ChannelClass_PHIDCHCLASS_HUB: Phidget_ChannelClass = 13;
pub const Phidget_ChannelClass_PHIDCHCLASS_HUMIDITYSENSOR: Phidget_ChannelClass = 15;
pub const Phidget_ChannelClass_PHIDCHCLASS_IR: Phidget_ChannelClass = 16;
pub const Phidget_ChannelClass_PHIDCHCLASS_LCD: Phidget_ChannelClass = 11;
pub const Phidget_ChannelClass_PHIDCHCLASS_LIGHTSENSOR: Phidget_ChannelClass = 17;
pub const Phidget_ChannelClass_PHIDCHCLASS_MAGNETOMETER: Phidget_ChannelClass = 18;
pub const Phidget_ChannelClass_PHIDCHCLASS_MESHDONGLE: Phidget_ChannelClass = 19;
pub const Phidget_ChannelClass_PHIDCHCLASS_MOTORPOSITIONCONTROLLER: Phidget_ChannelClass = 34;
pub const Phidget_ChannelClass_PHIDCHCLASS_MOTORVELOCITYCONTROLLER: Phidget_ChannelClass = 39;
pub const Phidget_ChannelClass_PHIDCHCLASS_PHSENSOR: Phidget_ChannelClass = 37;
pub const Phidget_ChannelClass_PHIDCHCLASS_POWERGUARD: Phidget_ChannelClass = 20;
pub const Phidget_ChannelClass_PHIDCHCLASS_PRESSURESENSOR: Phidget_ChannelClass = 21;
pub const Phidget_ChannelClass_PHIDCHCLASS_RCSERVO: Phidget_ChannelClass = 22;
pub const Phidget_ChannelClass_PHIDCHCLASS_RESISTANCEINPUT: Phidget_ChannelClass = 23;
pub const Phidget_ChannelClass_PHIDCHCLASS_RFID: Phidget_ChannelClass = 24;
pub const Phidget_ChannelClass_PHIDCHCLASS_SOUNDSENSOR: Phidget_ChannelClass = 25;
pub const Phidget_ChannelClass_PHIDCHCLASS_SPATIAL: Phidget_ChannelClass = 26;
pub const Phidget_ChannelClass_PHIDCHCLASS_STEPPER: Phidget_ChannelClass = 27;
pub const Phidget_ChannelClass_PHIDCHCLASS_TEMPERATURESENSOR: Phidget_ChannelClass = 28;
pub const Phidget_ChannelClass_PHIDCHCLASS_VOLTAGEINPUT: Phidget_ChannelClass = 29;
pub const Phidget_ChannelClass_PHIDCHCLASS_VOLTAGEOUTPUT: Phidget_ChannelClass = 30;
pub const Phidget_ChannelClass_PHIDCHCLASS_VOLTAGERATIOINPUT: Phidget_ChannelClass = 31;
pub type Phidget_ChannelClass = ::std::os::raw::c_int;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_NONE: Phidget_ChannelSubclass = 1;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_DIGITALOUTPUT_DUTY_CYCLE: Phidget_ChannelSubclass =
    16;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_DIGITALOUTPUT_FREQUENCY: Phidget_ChannelSubclass =
    18;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_DIGITALOUTPUT_LED_DRIVER: Phidget_ChannelSubclass =
    17;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_ENCODER_MODE_SETTABLE: Phidget_ChannelSubclass =
    96;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_LCD_GRAPHIC: Phidget_ChannelSubclass = 80;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_LCD_TEXT: Phidget_ChannelSubclass = 81;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_SPATIAL_AHRS: Phidget_ChannelSubclass = 112;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_TEMPERATURESENSOR_RTD: Phidget_ChannelSubclass =
    32;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_TEMPERATURESENSOR_THERMOCOUPLE:
    Phidget_ChannelSubclass = 33;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_VOLTAGEINPUT_SENSOR_PORT: Phidget_ChannelSubclass =
    48;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_VOLTAGERATIOINPUT_BRIDGE: Phidget_ChannelSubclass =
    65;
pub const Phidget_ChannelSubclass_PHIDCHSUBCLASS_VOLTAGERATIOINPUT_SENSOR_PORT:
    Phidget_ChannelSubclass = 64;
pub type Phidget_ChannelSubclass = ::std::os::raw::c_int;
pub const Phidget_MeshMode_MESHMODE_ROUTER: Phidget_MeshMode = 1;
pub const Phidget_MeshMode_MESHMODE_SLEEPYENDDEVICE: Phidget_MeshMode = 2;
pub type Phidget_MeshMode = ::std::os::raw::c_int;
pub const Phidget_PowerSupply_POWER_SUPPLY_OFF: Phidget_PowerSupply = 1;
pub const Phidget_PowerSupply_POWER_SUPPLY_12V: Phidget_PowerSupply = 2;
pub const Phidget_PowerSupply_POWER_SUPPLY_24V: Phidget_PowerSupply = 3;
pub type Phidget_PowerSupply = ::std::os::raw::c_int;
pub const Phidget_RTDWireSetup_RTD_WIRE_SETUP_2WIRE: Phidget_RTDWireSetup = 1;
pub const Phidget_RTDWireSetup_RTD_WIRE_SETUP_3WIRE: Phidget_RTDWireSetup = 2;
pub const Phidget_RTDWireSetup_RTD_WIRE_SETUP_4WIRE: Phidget_RTDWireSetup = 3;
pub type Phidget_RTDWireSetup = ::std::os::raw::c_int;
pub const Phidget_InputMode_INPUT_MODE_NPN: Phidget_InputMode = 1;
pub const Phidget_InputMode_INPUT_MODE_PNP: Phidget_InputMode = 2;
pub type Phidget_InputMode = ::std::os::raw::c_int;
pub const Phidget_FanMode_FAN_MODE_OFF: Phidget_FanMode = 1;
pub const Phidget_FanMode_FAN_MODE_ON: Phidget_FanMode = 2;
pub const Phidget_FanMode_FAN_MODE_AUTO: Phidget_FanMode = 3;
pub type Phidget_FanMode = ::std::os::raw::c_int;
pub const Phidget_DecelerationType_DECELERATION_TYPE_COAST: Phidget_DecelerationType = 1;
pub const Phidget_DecelerationType_DECELERATION_TYPE_FORCED: Phidget_DecelerationType = 2;
pub type Phidget_DecelerationType = ::std::os::raw::c_int;
pub const Phidget_PositionType_POSITION_TYPE_ENCODER: Phidget_PositionType = 1;
pub const Phidget_PositionType_POSITION_TYPE_HALL_SENSOR: Phidget_PositionType = 2;
pub type Phidget_PositionType = ::std::os::raw::c_int;
pub const Phidget_SpatialPrecision_SPATIAL_PRECISION_HYBRID: Phidget_SpatialPrecision = 0;
pub const Phidget_SpatialPrecision_SPATIAL_PRECISION_HIGH: Phidget_SpatialPrecision = 1;
pub const Phidget_SpatialPrecision_SPATIAL_PRECISION_LOW: Phidget_SpatialPrecision = 2;
pub type Phidget_SpatialPrecision = ::std::os::raw::c_int;
pub const Phidget_Unit_PHIDUNIT_NONE: Phidget_Unit = 0;
pub const Phidget_Unit_PHIDUNIT_BOOLEAN: Phidget_Unit = 1;
pub const Phidget_Unit_PHIDUNIT_PERCENT: Phidget_Unit = 2;
pub const Phidget_Unit_PHIDUNIT_DECIBEL: Phidget_Unit = 3;
pub const Phidget_Unit_PHIDUNIT_MILLIMETER: Phidget_Unit = 4;
pub const Phidget_Unit_PHIDUNIT_CENTIMETER: Phidget_Unit = 5;
pub const Phidget_Unit_PHIDUNIT_METER: Phidget_Unit = 6;
pub const Phidget_Unit_PHIDUNIT_GRAM: Phidget_Unit = 7;
pub const Phidget_Unit_PHIDUNIT_KILOGRAM: Phidget_Unit = 8;
pub const Phidget_Unit_PHIDUNIT_MILLIAMPERE: Phidget_Unit = 9;
pub const Phidget_Unit_PHIDUNIT_AMPERE: Phidget_Unit = 10;
pub const Phidget_Unit_PHIDUNIT_KILOPASCAL: Phidget_Unit = 11;
pub const Phidget_Unit_PHIDUNIT_VOLT: Phidget_Unit = 12;
pub const Phidget_Unit_PHIDUNIT_DEGREE_CELCIUS: Phidget_Unit = 13;
pub const Phidget_Unit_PHIDUNIT_LUX: Phidget_Unit = 14;
pub const Phidget_Unit_PHIDUNIT_GAUSS: Phidget_Unit = 15;
pub const Phidget_Unit_PHIDUNIT_PH: Phidget_Unit = 16;
pub const Phidget_Unit_PHIDUNIT_WATT: Phidget_Unit = 17;
pub type Phidget_Unit = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Phidget_UnitInfo {
    pub unit: Phidget_Unit,
    pub name: *const ::std::os::raw::c_char,
    pub symbol: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Phidget_UnitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Phidget_UnitInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Phidget_UnitInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Phidget_UnitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Phidget_UnitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Phidget_UnitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Phidget_UnitInfo),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Phidget_UnitInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Phidget_UnitInfo),
            "::",
            stringify!(symbol)
        )
    );
}
pub type Phidget_UnitInfoHandle = *mut Phidget_UnitInfo;
pub const PhidgetServerType_PHIDGETSERVER_NONE: PhidgetServerType = 0;
pub const PhidgetServerType_PHIDGETSERVER_DEVICELISTENER: PhidgetServerType = 1;
pub const PhidgetServerType_PHIDGETSERVER_DEVICE: PhidgetServerType = 2;
pub const PhidgetServerType_PHIDGETSERVER_DEVICEREMOTE: PhidgetServerType = 3;
pub const PhidgetServerType_PHIDGETSERVER_WWWLISTENER: PhidgetServerType = 4;
pub const PhidgetServerType_PHIDGETSERVER_WWW: PhidgetServerType = 5;
pub const PhidgetServerType_PHIDGETSERVER_WWWREMOTE: PhidgetServerType = 6;
pub const PhidgetServerType_PHIDGETSERVER_SBC: PhidgetServerType = 7;
pub type PhidgetServerType = ::std::os::raw::c_int;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_1: PhidgetVoltageRatioInput_BridgeGain =
    1;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_2: PhidgetVoltageRatioInput_BridgeGain =
    2;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_4: PhidgetVoltageRatioInput_BridgeGain =
    3;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_8: PhidgetVoltageRatioInput_BridgeGain =
    4;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_16: PhidgetVoltageRatioInput_BridgeGain =
    5;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_32: PhidgetVoltageRatioInput_BridgeGain =
    6;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_64: PhidgetVoltageRatioInput_BridgeGain =
    7;
pub const PhidgetVoltageRatioInput_BridgeGain_BRIDGE_GAIN_128: PhidgetVoltageRatioInput_BridgeGain =
    8;
pub type PhidgetVoltageRatioInput_BridgeGain = ::std::os::raw::c_int;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_VOLTAGERATIO:
    PhidgetVoltageRatioInput_SensorType = 0;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1101_SHARP_2D120X:
    PhidgetVoltageRatioInput_SensorType = 11011;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1101_SHARP_2Y0A21:
    PhidgetVoltageRatioInput_SensorType = 11012;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1101_SHARP_2Y0A02:
    PhidgetVoltageRatioInput_SensorType = 11013;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1102:
    PhidgetVoltageRatioInput_SensorType = 11020;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1103:
    PhidgetVoltageRatioInput_SensorType = 11030;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1104:
    PhidgetVoltageRatioInput_SensorType = 11040;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1105:
    PhidgetVoltageRatioInput_SensorType = 11050;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1106:
    PhidgetVoltageRatioInput_SensorType = 11060;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1107:
    PhidgetVoltageRatioInput_SensorType = 11070;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1108:
    PhidgetVoltageRatioInput_SensorType = 11080;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1109:
    PhidgetVoltageRatioInput_SensorType = 11090;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1110:
    PhidgetVoltageRatioInput_SensorType = 11100;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1111:
    PhidgetVoltageRatioInput_SensorType = 11110;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1112:
    PhidgetVoltageRatioInput_SensorType = 11120;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1113:
    PhidgetVoltageRatioInput_SensorType = 11130;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1115:
    PhidgetVoltageRatioInput_SensorType = 11150;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1116:
    PhidgetVoltageRatioInput_SensorType = 11160;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1118_AC:
    PhidgetVoltageRatioInput_SensorType = 11181;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1118_DC:
    PhidgetVoltageRatioInput_SensorType = 11182;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1119_AC:
    PhidgetVoltageRatioInput_SensorType = 11191;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1119_DC:
    PhidgetVoltageRatioInput_SensorType = 11192;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1120:
    PhidgetVoltageRatioInput_SensorType = 11200;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1121:
    PhidgetVoltageRatioInput_SensorType = 11210;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1122_AC:
    PhidgetVoltageRatioInput_SensorType = 11221;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1122_DC:
    PhidgetVoltageRatioInput_SensorType = 11222;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1124:
    PhidgetVoltageRatioInput_SensorType = 11240;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1125_HUMIDITY:
    PhidgetVoltageRatioInput_SensorType = 11251;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1125_TEMPERATURE:
    PhidgetVoltageRatioInput_SensorType = 11252;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1126:
    PhidgetVoltageRatioInput_SensorType = 11260;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1128:
    PhidgetVoltageRatioInput_SensorType = 11280;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1129:
    PhidgetVoltageRatioInput_SensorType = 11290;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1131:
    PhidgetVoltageRatioInput_SensorType = 11310;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1134:
    PhidgetVoltageRatioInput_SensorType = 11340;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1136:
    PhidgetVoltageRatioInput_SensorType = 11360;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1137:
    PhidgetVoltageRatioInput_SensorType = 11370;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1138:
    PhidgetVoltageRatioInput_SensorType = 11380;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1139:
    PhidgetVoltageRatioInput_SensorType = 11390;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1140:
    PhidgetVoltageRatioInput_SensorType = 11400;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1141:
    PhidgetVoltageRatioInput_SensorType = 11410;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_1146:
    PhidgetVoltageRatioInput_SensorType = 11460;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3120:
    PhidgetVoltageRatioInput_SensorType = 31200;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3121:
    PhidgetVoltageRatioInput_SensorType = 31210;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3122:
    PhidgetVoltageRatioInput_SensorType = 31220;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3123:
    PhidgetVoltageRatioInput_SensorType = 31230;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3130:
    PhidgetVoltageRatioInput_SensorType = 31300;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3520:
    PhidgetVoltageRatioInput_SensorType = 35200;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3521:
    PhidgetVoltageRatioInput_SensorType = 35210;
pub const PhidgetVoltageRatioInput_SensorType_SENSOR_TYPE_3522:
    PhidgetVoltageRatioInput_SensorType = 35220;
pub type PhidgetVoltageRatioInput_SensorType = ::std::os::raw::c_int;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_1_7V:
    PhidgetDigitalOutput_LEDForwardVoltage = 1;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_2_75V:
    PhidgetDigitalOutput_LEDForwardVoltage = 2;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_3_2V:
    PhidgetDigitalOutput_LEDForwardVoltage = 3;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_3_9V:
    PhidgetDigitalOutput_LEDForwardVoltage = 4;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_4_0V:
    PhidgetDigitalOutput_LEDForwardVoltage = 5;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_4_8V:
    PhidgetDigitalOutput_LEDForwardVoltage = 6;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_5_0V:
    PhidgetDigitalOutput_LEDForwardVoltage = 7;
pub const PhidgetDigitalOutput_LEDForwardVoltage_LED_FORWARD_VOLTAGE_5_6V:
    PhidgetDigitalOutput_LEDForwardVoltage = 8;
pub type PhidgetDigitalOutput_LEDForwardVoltage = ::std::os::raw::c_int;
pub const PhidgetRCServo_Voltage_RCSERVO_VOLTAGE_5V: PhidgetRCServo_Voltage = 1;
pub const PhidgetRCServo_Voltage_RCSERVO_VOLTAGE_6V: PhidgetRCServo_Voltage = 2;
pub const PhidgetRCServo_Voltage_RCSERVO_VOLTAGE_7_4V: PhidgetRCServo_Voltage = 3;
pub type PhidgetRCServo_Voltage = ::std::os::raw::c_int;
pub const PhidgetVoltageOutput_VoltageOutputRange_VOLTAGE_OUTPUT_RANGE_10V:
    PhidgetVoltageOutput_VoltageOutputRange = 1;
pub const PhidgetVoltageOutput_VoltageOutputRange_VOLTAGE_OUTPUT_RANGE_5V:
    PhidgetVoltageOutput_VoltageOutputRange = 2;
pub type PhidgetVoltageOutput_VoltageOutputRange = ::std::os::raw::c_int;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_10mV: PhidgetVoltageInput_VoltageRange = 1;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_40mV: PhidgetVoltageInput_VoltageRange = 2;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_200mV: PhidgetVoltageInput_VoltageRange =
    3;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_312_5mV: PhidgetVoltageInput_VoltageRange =
    4;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_400mV: PhidgetVoltageInput_VoltageRange =
    5;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_1000mV: PhidgetVoltageInput_VoltageRange =
    6;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_2V: PhidgetVoltageInput_VoltageRange = 7;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_5V: PhidgetVoltageInput_VoltageRange = 8;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_15V: PhidgetVoltageInput_VoltageRange = 9;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_40V: PhidgetVoltageInput_VoltageRange = 10;
pub const PhidgetVoltageInput_VoltageRange_VOLTAGE_RANGE_AUTO: PhidgetVoltageInput_VoltageRange =
    11;
pub type PhidgetVoltageInput_VoltageRange = ::std::os::raw::c_int;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_VOLTAGE: PhidgetVoltageInput_SensorType = 0;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1114: PhidgetVoltageInput_SensorType = 11140;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1117: PhidgetVoltageInput_SensorType = 11170;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1123: PhidgetVoltageInput_SensorType = 11230;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1127: PhidgetVoltageInput_SensorType = 11270;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1130_PH: PhidgetVoltageInput_SensorType =
    11301;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1130_ORP: PhidgetVoltageInput_SensorType =
    11302;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1132: PhidgetVoltageInput_SensorType = 11320;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1133: PhidgetVoltageInput_SensorType = 11330;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1135: PhidgetVoltageInput_SensorType = 11350;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1142: PhidgetVoltageInput_SensorType = 11420;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_1143: PhidgetVoltageInput_SensorType = 11430;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3500: PhidgetVoltageInput_SensorType = 35000;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3501: PhidgetVoltageInput_SensorType = 35010;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3502: PhidgetVoltageInput_SensorType = 35020;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3503: PhidgetVoltageInput_SensorType = 35030;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3507: PhidgetVoltageInput_SensorType = 35070;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3508: PhidgetVoltageInput_SensorType = 35080;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3509: PhidgetVoltageInput_SensorType = 35090;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3510: PhidgetVoltageInput_SensorType = 35100;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3511: PhidgetVoltageInput_SensorType = 35110;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3512: PhidgetVoltageInput_SensorType = 35120;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3513: PhidgetVoltageInput_SensorType = 35130;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3514: PhidgetVoltageInput_SensorType = 35140;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3515: PhidgetVoltageInput_SensorType = 35150;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3516: PhidgetVoltageInput_SensorType = 35160;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3517: PhidgetVoltageInput_SensorType = 35170;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3518: PhidgetVoltageInput_SensorType = 35180;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3519: PhidgetVoltageInput_SensorType = 35190;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3584: PhidgetVoltageInput_SensorType = 35840;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3585: PhidgetVoltageInput_SensorType = 35850;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3586: PhidgetVoltageInput_SensorType = 35860;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3587: PhidgetVoltageInput_SensorType = 35870;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3588: PhidgetVoltageInput_SensorType = 35880;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_3589: PhidgetVoltageInput_SensorType = 35890;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_MOT2002_LOW: PhidgetVoltageInput_SensorType =
    20020;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_MOT2002_MED: PhidgetVoltageInput_SensorType =
    20021;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_MOT2002_HIGH: PhidgetVoltageInput_SensorType =
    20022;
pub const PhidgetVoltageInput_SensorType_SENSOR_TYPE_VCP4114: PhidgetVoltageInput_SensorType =
    41140;
pub type PhidgetVoltageInput_SensorType = ::std::os::raw::c_int;
pub const PhidgetRFID_Protocol_PROTOCOL_EM4100: PhidgetRFID_Protocol = 1;
pub const PhidgetRFID_Protocol_PROTOCOL_ISO11785_FDX_B: PhidgetRFID_Protocol = 2;
pub const PhidgetRFID_Protocol_PROTOCOL_PHIDGETS: PhidgetRFID_Protocol = 3;
pub type PhidgetRFID_Protocol = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_Time {
    pub tm_ms: i16,
    pub tm_sec: i16,
    pub tm_min: i16,
    pub tm_hour: i16,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_Time() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_Time> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_Time>(),
        8usize,
        concat!("Size of: ", stringify!(PhidgetGPS_Time))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_Time>(),
        2usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_Time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Time),
            "::",
            stringify!(tm_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Time),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Time),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Time),
            "::",
            stringify!(tm_hour)
        )
    );
}
pub type PhidgetGPS_TimeHandle = *mut PhidgetGPS_Time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_Date {
    pub tm_mday: i16,
    pub tm_mon: i16,
    pub tm_year: i16,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_Date() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_Date> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_Date>(),
        6usize,
        concat!("Size of: ", stringify!(PhidgetGPS_Date))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_Date>(),
        2usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_Date))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Date),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Date),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_Date),
            "::",
            stringify!(tm_year)
        )
    );
}
pub type PhidgetGPS_DateHandle = *mut PhidgetGPS_Date;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_GPGGA {
    pub latitude: f64,
    pub longitude: f64,
    pub fixQuality: i16,
    pub numSatellites: i16,
    pub horizontalDilution: f64,
    pub altitude: f64,
    pub heightOfGeoid: f64,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_GPGGA() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_GPGGA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_GPGGA>(),
        48usize,
        concat!("Size of: ", stringify!(PhidgetGPS_GPGGA))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_GPGGA>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_GPGGA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixQuality) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(fixQuality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSatellites) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(numSatellites)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontalDilution) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(horizontalDilution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heightOfGeoid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGGA),
            "::",
            stringify!(heightOfGeoid)
        )
    );
}
pub type PhidgetGPS_GPGGAHandle = *mut PhidgetGPS_GPGGA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_GPGSA {
    pub mode: ::std::os::raw::c_char,
    pub fixType: i16,
    pub satUsed: [i16; 12usize],
    pub posnDilution: f64,
    pub horizDilution: f64,
    pub vertDilution: f64,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_GPGSA() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_GPGSA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_GPGSA>(),
        56usize,
        concat!("Size of: ", stringify!(PhidgetGPS_GPGSA))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_GPGSA>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_GPGSA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(fixType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satUsed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(satUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posnDilution) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(posnDilution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizDilution) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(horizDilution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertDilution) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPGSA),
            "::",
            stringify!(vertDilution)
        )
    );
}
pub type PhidgetGPS_GPGSAHandle = *mut PhidgetGPS_GPGSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_GPRMC {
    pub status: ::std::os::raw::c_char,
    pub latitude: f64,
    pub longitude: f64,
    pub speedKnots: f64,
    pub heading: f64,
    pub magneticVariation: f64,
    pub mode: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_GPRMC() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_GPRMC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_GPRMC>(),
        56usize,
        concat!("Size of: ", stringify!(PhidgetGPS_GPRMC))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_GPRMC>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_GPRMC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speedKnots) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(speedKnots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(heading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magneticVariation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(magneticVariation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPRMC),
            "::",
            stringify!(mode)
        )
    );
}
pub type PhidgetGPS_GPRMCHandle = *mut PhidgetGPS_GPRMC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_GPVTG {
    pub trueHeading: f64,
    pub magneticHeading: f64,
    pub speedKnots: f64,
    pub speed: f64,
    pub mode: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_GPVTG() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_GPVTG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_GPVTG>(),
        40usize,
        concat!("Size of: ", stringify!(PhidgetGPS_GPVTG))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_GPVTG>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_GPVTG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trueHeading) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPVTG),
            "::",
            stringify!(trueHeading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magneticHeading) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPVTG),
            "::",
            stringify!(magneticHeading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speedKnots) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPVTG),
            "::",
            stringify!(speedKnots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPVTG),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_GPVTG),
            "::",
            stringify!(mode)
        )
    );
}
pub type PhidgetGPS_GPVTGHandle = *mut PhidgetGPS_GPVTG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetGPS_NMEAData {
    pub GGA: PhidgetGPS_GPGGA,
    pub GSA: PhidgetGPS_GPGSA,
    pub RMC: PhidgetGPS_GPRMC,
    pub VTG: PhidgetGPS_GPVTG,
}
#[test]
fn bindgen_test_layout_PhidgetGPS_NMEAData() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetGPS_NMEAData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetGPS_NMEAData>(),
        200usize,
        concat!("Size of: ", stringify!(PhidgetGPS_NMEAData))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetGPS_NMEAData>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetGPS_NMEAData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GGA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_NMEAData),
            "::",
            stringify!(GGA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GSA) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_NMEAData),
            "::",
            stringify!(GSA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RMC) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_NMEAData),
            "::",
            stringify!(RMC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VTG) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetGPS_NMEAData),
            "::",
            stringify!(VTG)
        )
    );
}
pub type PhidgetGPS_NMEADataHandle = *mut PhidgetGPS_NMEAData;
pub const Phidget_SpatialAlgorithm_SPATIAL_ALGORITHM_NONE: Phidget_SpatialAlgorithm = 0;
pub const Phidget_SpatialAlgorithm_SPATIAL_ALGORITHM_AHRS: Phidget_SpatialAlgorithm = 1;
pub const Phidget_SpatialAlgorithm_SPATIAL_ALGORITHM_IMU: Phidget_SpatialAlgorithm = 2;
pub type Phidget_SpatialAlgorithm = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetSpatial_SpatialQuaternion {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
#[test]
fn bindgen_test_layout_PhidgetSpatial_SpatialQuaternion() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetSpatial_SpatialQuaternion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetSpatial_SpatialQuaternion>(),
        32usize,
        concat!("Size of: ", stringify!(PhidgetSpatial_SpatialQuaternion))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetSpatial_SpatialQuaternion>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(PhidgetSpatial_SpatialQuaternion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialQuaternion),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialQuaternion),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialQuaternion),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialQuaternion),
            "::",
            stringify!(w)
        )
    );
}
pub type PhidgetSpatial_SpatialQuaternionHandle = *mut PhidgetSpatial_SpatialQuaternion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetSpatial_SpatialEulerAngles {
    pub pitch: f64,
    pub roll: f64,
    pub heading: f64,
}
#[test]
fn bindgen_test_layout_PhidgetSpatial_SpatialEulerAngles() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetSpatial_SpatialEulerAngles> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetSpatial_SpatialEulerAngles>(),
        24usize,
        concat!("Size of: ", stringify!(PhidgetSpatial_SpatialEulerAngles))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetSpatial_SpatialEulerAngles>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(PhidgetSpatial_SpatialEulerAngles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialEulerAngles),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialEulerAngles),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetSpatial_SpatialEulerAngles),
            "::",
            stringify!(heading)
        )
    );
}
pub type PhidgetSpatial_SpatialEulerAnglesHandle = *mut PhidgetSpatial_SpatialEulerAngles;
pub const PhidgetTemperatureSensor_RTDType_RTD_TYPE_PT100_3850: PhidgetTemperatureSensor_RTDType =
    1;
pub const PhidgetTemperatureSensor_RTDType_RTD_TYPE_PT1000_3850: PhidgetTemperatureSensor_RTDType =
    2;
pub const PhidgetTemperatureSensor_RTDType_RTD_TYPE_PT100_3920: PhidgetTemperatureSensor_RTDType =
    3;
pub const PhidgetTemperatureSensor_RTDType_RTD_TYPE_PT1000_3920: PhidgetTemperatureSensor_RTDType =
    4;
pub type PhidgetTemperatureSensor_RTDType = ::std::os::raw::c_int;
pub const PhidgetTemperatureSensor_ThermocoupleType_THERMOCOUPLE_TYPE_J:
    PhidgetTemperatureSensor_ThermocoupleType = 1;
pub const PhidgetTemperatureSensor_ThermocoupleType_THERMOCOUPLE_TYPE_K:
    PhidgetTemperatureSensor_ThermocoupleType = 2;
pub const PhidgetTemperatureSensor_ThermocoupleType_THERMOCOUPLE_TYPE_E:
    PhidgetTemperatureSensor_ThermocoupleType = 3;
pub const PhidgetTemperatureSensor_ThermocoupleType_THERMOCOUPLE_TYPE_T:
    PhidgetTemperatureSensor_ThermocoupleType = 4;
pub type PhidgetTemperatureSensor_ThermocoupleType = ::std::os::raw::c_int;
pub const PhidgetFrequencyCounter_FilterType_FILTER_TYPE_ZERO_CROSSING:
    PhidgetFrequencyCounter_FilterType = 1;
pub const PhidgetFrequencyCounter_FilterType_FILTER_TYPE_LOGIC_LEVEL:
    PhidgetFrequencyCounter_FilterType = 2;
pub type PhidgetFrequencyCounter_FilterType = ::std::os::raw::c_int;
pub const PhidgetIR_Encoding_IR_ENCODING_UNKNOWN: PhidgetIR_Encoding = 1;
pub const PhidgetIR_Encoding_IR_ENCODING_SPACE: PhidgetIR_Encoding = 2;
pub const PhidgetIR_Encoding_IR_ENCODING_PULSE: PhidgetIR_Encoding = 3;
pub const PhidgetIR_Encoding_IR_ENCODING_BIPHASE: PhidgetIR_Encoding = 4;
pub const PhidgetIR_Encoding_IR_ENCODING_RC5: PhidgetIR_Encoding = 5;
pub const PhidgetIR_Encoding_IR_ENCODING_RC6: PhidgetIR_Encoding = 6;
pub type PhidgetIR_Encoding = ::std::os::raw::c_int;
pub const PhidgetIR_Length_IR_LENGTH_UNKNOWN: PhidgetIR_Length = 1;
pub const PhidgetIR_Length_IR_LENGTH_CONSTANT: PhidgetIR_Length = 2;
pub const PhidgetIR_Length_IR_LENGTH_VARIABLE: PhidgetIR_Length = 3;
pub type PhidgetIR_Length = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetIR_CodeInfo {
    pub bitCount: u32,
    pub encoding: PhidgetIR_Encoding,
    pub length: PhidgetIR_Length,
    pub gap: u32,
    pub trail: u32,
    pub header: [u32; 2usize],
    pub one: [u32; 2usize],
    pub zero: [u32; 2usize],
    pub repeat: [u32; 26usize],
    pub minRepeat: u32,
    pub dutyCycle: f64,
    pub carrierFrequency: u32,
    pub toggleMask: [::std::os::raw::c_char; 33usize],
}
#[test]
fn bindgen_test_layout_PhidgetIR_CodeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetIR_CodeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetIR_CodeInfo>(),
        200usize,
        concat!("Size of: ", stringify!(PhidgetIR_CodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetIR_CodeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetIR_CodeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(bitCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(trail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).one) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(one)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRepeat) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(minRepeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dutyCycle) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(dutyCycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).carrierFrequency) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(carrierFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toggleMask) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetIR_CodeInfo),
            "::",
            stringify!(toggleMask)
        )
    );
}
pub type PhidgetIR_CodeInfoHandle = *mut PhidgetIR_CodeInfo;
pub const PhidgetStepper_ControlMode_CONTROL_MODE_STEP: PhidgetStepper_ControlMode = 0;
pub const PhidgetStepper_ControlMode_CONTROL_MODE_RUN: PhidgetStepper_ControlMode = 1;
pub type PhidgetStepper_ControlMode = ::std::os::raw::c_int;
pub const PhidgetLCD_Font_FONT_User1: PhidgetLCD_Font = 1;
pub const PhidgetLCD_Font_FONT_User2: PhidgetLCD_Font = 2;
pub const PhidgetLCD_Font_FONT_6x10: PhidgetLCD_Font = 3;
pub const PhidgetLCD_Font_FONT_5x8: PhidgetLCD_Font = 4;
pub const PhidgetLCD_Font_FONT_6x12: PhidgetLCD_Font = 5;
pub type PhidgetLCD_Font = ::std::os::raw::c_int;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_NONE: PhidgetLCD_ScreenSize = 1;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_1x8: PhidgetLCD_ScreenSize = 2;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_2x8: PhidgetLCD_ScreenSize = 3;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_1x16: PhidgetLCD_ScreenSize = 4;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_2x16: PhidgetLCD_ScreenSize = 5;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_4x16: PhidgetLCD_ScreenSize = 6;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_2x20: PhidgetLCD_ScreenSize = 7;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_4x20: PhidgetLCD_ScreenSize = 8;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_2x24: PhidgetLCD_ScreenSize = 9;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_1x40: PhidgetLCD_ScreenSize = 10;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_2x40: PhidgetLCD_ScreenSize = 11;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_4x40: PhidgetLCD_ScreenSize = 12;
pub const PhidgetLCD_ScreenSize_SCREEN_SIZE_64x128: PhidgetLCD_ScreenSize = 13;
pub type PhidgetLCD_ScreenSize = ::std::os::raw::c_int;
pub const PhidgetLCD_PixelState_PIXEL_STATE_OFF: PhidgetLCD_PixelState = 0;
pub const PhidgetLCD_PixelState_PIXEL_STATE_ON: PhidgetLCD_PixelState = 1;
pub const PhidgetLCD_PixelState_PIXEL_STATE_INVERT: PhidgetLCD_PixelState = 2;
pub type PhidgetLCD_PixelState = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_Parity_PARITY_MODE_NONE: PhidgetDataAdapter_Parity = 1;
pub const PhidgetDataAdapter_Parity_PARITY_MODE_EVEN: PhidgetDataAdapter_Parity = 2;
pub const PhidgetDataAdapter_Parity_PARITY_MODE_ODD: PhidgetDataAdapter_Parity = 3;
pub type PhidgetDataAdapter_Parity = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_StopBits_STOP_BITS_ONE: PhidgetDataAdapter_StopBits = 1;
pub const PhidgetDataAdapter_StopBits_STOP_BITS_TWO: PhidgetDataAdapter_StopBits = 2;
pub type PhidgetDataAdapter_StopBits = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_HandshakeMode_HANDSHAKE_MODE_NONE: PhidgetDataAdapter_HandshakeMode =
    1;
pub const PhidgetDataAdapter_HandshakeMode_HANDSHAKE_MODE_REQUEST_TO_SEND:
    PhidgetDataAdapter_HandshakeMode = 2;
pub const PhidgetDataAdapter_HandshakeMode_HANDSHAKE_MODE_READY_TO_RECEIVE:
    PhidgetDataAdapter_HandshakeMode = 3;
pub type PhidgetDataAdapter_HandshakeMode = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_RS485: PhidgetDataAdapter_Protocol = 1;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_RS422: PhidgetDataAdapter_Protocol = 2;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_DMX512: PhidgetDataAdapter_Protocol = 3;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_MODBUS_RTU: PhidgetDataAdapter_Protocol = 4;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_SPI: PhidgetDataAdapter_Protocol = 5;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_I2C: PhidgetDataAdapter_Protocol = 6;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_UART: PhidgetDataAdapter_Protocol = 7;
pub const PhidgetDataAdapter_Protocol_PROTOCOL_RS232: PhidgetDataAdapter_Protocol = 8;
pub type PhidgetDataAdapter_Protocol = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_SPIMode_SPI_MODE_0: PhidgetDataAdapter_SPIMode = 1;
pub const PhidgetDataAdapter_SPIMode_SPI_MODE_1: PhidgetDataAdapter_SPIMode = 2;
pub const PhidgetDataAdapter_SPIMode_SPI_MODE_2: PhidgetDataAdapter_SPIMode = 3;
pub const PhidgetDataAdapter_SPIMode_SPI_MODE_3: PhidgetDataAdapter_SPIMode = 4;
pub type PhidgetDataAdapter_SPIMode = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_Endianness_ENDIANNESS_MSB_FIRST: PhidgetDataAdapter_Endianness = 1;
pub const PhidgetDataAdapter_Endianness_ENDIANNESS_LSB_FIRST: PhidgetDataAdapter_Endianness = 2;
pub type PhidgetDataAdapter_Endianness = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_IOVoltage_IO_VOLTAGE_EXTERN: PhidgetDataAdapter_IOVoltage = 1;
pub const PhidgetDataAdapter_IOVoltage_IO_VOLTAGE_1_8V: PhidgetDataAdapter_IOVoltage = 2;
pub const PhidgetDataAdapter_IOVoltage_IO_VOLTAGE_2_5V: PhidgetDataAdapter_IOVoltage = 3;
pub const PhidgetDataAdapter_IOVoltage_IO_VOLTAGE_3_3V: PhidgetDataAdapter_IOVoltage = 4;
pub const PhidgetDataAdapter_IOVoltage_IO_VOLTAGE_5_0V: PhidgetDataAdapter_IOVoltage = 5;
pub type PhidgetDataAdapter_IOVoltage = ::std::os::raw::c_int;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_OK: PhidgetDataAdapter_PacketErrorCode =
    0;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_UNKNOWN:
    PhidgetDataAdapter_PacketErrorCode = 1;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_TIMEOUT:
    PhidgetDataAdapter_PacketErrorCode = 2;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_FORMAT:
    PhidgetDataAdapter_PacketErrorCode = 3;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_INVALID:
    PhidgetDataAdapter_PacketErrorCode = 4;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_OVERRUN:
    PhidgetDataAdapter_PacketErrorCode = 5;
pub const PhidgetDataAdapter_PacketErrorCode_PACKET_ERROR_CORRUPT:
    PhidgetDataAdapter_PacketErrorCode = 6;
pub type PhidgetDataAdapter_PacketErrorCode = ::std::os::raw::c_int;
pub const PhidgetSoundSensor_SPLRange_SPL_RANGE_102dB: PhidgetSoundSensor_SPLRange = 1;
pub const PhidgetSoundSensor_SPLRange_SPL_RANGE_82dB: PhidgetSoundSensor_SPLRange = 2;
pub type PhidgetSoundSensor_SPLRange = ::std::os::raw::c_int;
pub const PhidgetHub_PortMode_PORT_MODE_VINT_PORT: PhidgetHub_PortMode = 0;
pub const PhidgetHub_PortMode_PORT_MODE_DIGITAL_INPUT: PhidgetHub_PortMode = 1;
pub const PhidgetHub_PortMode_PORT_MODE_DIGITAL_OUTPUT: PhidgetHub_PortMode = 2;
pub const PhidgetHub_PortMode_PORT_MODE_VOLTAGE_INPUT: PhidgetHub_PortMode = 3;
pub const PhidgetHub_PortMode_PORT_MODE_VOLTAGE_RATIO_INPUT: PhidgetHub_PortMode = 4;
pub type PhidgetHub_PortMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Phidget {
    _unused: [u8; 0],
}
pub type Phidget = _Phidget;
pub type PhidgetHandle = *mut _Phidget;
pub type Phidget_AsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phid: PhidgetHandle,
        ctx: *mut ::std::os::raw::c_void,
        returnCode: PhidgetReturnCode,
    ),
>;
extern "C" {
    pub fn Phidget_getLibraryVersion(
        libraryVersion: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getLibraryVersionNumber(
        libraryVersion: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getErrorDescription(
        errorCode: PhidgetReturnCode,
        errorString: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getLastError(
        errorCode: *mut PhidgetReturnCode,
        errorString: *mut *const ::std::os::raw::c_char,
        errorDetail: *mut ::std::os::raw::c_char,
        errorDetailLen: *mut usize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_finalize(flags: ::std::os::raw::c_int) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_resetLibrary() -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_open(phid: PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_openWaitForAttachment(phid: PhidgetHandle, timeoutMs: u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_close(phid: PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_delete(phid: *mut PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_writeDeviceLabel(
        phid: PhidgetHandle,
        deviceLabel: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_retain(phid: PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_release(phid: *mut PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChildDevices(
        phid: PhidgetHandle,
        arr: *mut PhidgetHandle,
        arrCnt: *mut usize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_releaseDevices(arr: *mut PhidgetHandle, arrCnt: usize) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDataInterval(phid: PhidgetHandle, di: *mut u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMinDataInterval(phid: PhidgetHandle, min: *mut u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMaxDataInterval(phid: PhidgetHandle, max: *mut u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setDataInterval(phid: PhidgetHandle, di: u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDataRate(phid: PhidgetHandle, dr: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMinDataRate(phid: PhidgetHandle, min: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMaxDataRate(phid: PhidgetHandle, max: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setDataRate(phid: PhidgetHandle, dr: f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getAttached(
        phid: PhidgetHandle,
        attached: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getIsChannel(
        phid: PhidgetHandle,
        isChannel: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getIsLocal(
        phid: PhidgetHandle,
        isLocal: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setIsLocal(
        phid: PhidgetHandle,
        isLocal: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getIsRemote(
        phid: PhidgetHandle,
        isRemote: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setIsRemote(
        phid: PhidgetHandle,
        isRemote: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getParent(phid: PhidgetHandle, parent: *mut PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getServerName(
        phid: PhidgetHandle,
        serverName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getServerUniqueName(
        phid: PhidgetHandle,
        serverUniqueName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setServerName(
        phid: PhidgetHandle,
        serverName: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getServerPeerName(
        phid: PhidgetHandle,
        serverPeerName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getServerHostname(
        phid: PhidgetHandle,
        serverHostname: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getServerVersion(
        phid: PhidgetHandle,
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getClientVersion(
        phid: PhidgetHandle,
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getIsOpen(
        phid: PhidgetHandle,
        status: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChannel(
        phid: PhidgetHandle,
        channel: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setChannel(
        phid: PhidgetHandle,
        channel: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChannelClass(
        phid: PhidgetHandle,
        channelClass: *mut Phidget_ChannelClass,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChannelClassName(
        phid: PhidgetHandle,
        channelClassName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChannelName(
        phid: PhidgetHandle,
        channelName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getChannelSubclass(
        phid: PhidgetHandle,
        channelSubclass: *mut Phidget_ChannelSubclass,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceClass(
        phid: PhidgetHandle,
        deviceClass: *mut Phidget_DeviceClass,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceClassName(
        phid: PhidgetHandle,
        deviceClassName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceID(
        phid: PhidgetHandle,
        deviceID: *mut Phidget_DeviceID,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceLabel(
        phid: PhidgetHandle,
        deviceLabel: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setDeviceLabel(
        phid: PhidgetHandle,
        deviceLabel: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceName(
        phid: PhidgetHandle,
        deviceName: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceSerialNumber(
        phid: PhidgetHandle,
        deviceSerialNumber: *mut i32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setDeviceSerialNumber(
        phid: PhidgetHandle,
        deviceSerialNumber: i32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceSKU(
        phid: PhidgetHandle,
        deviceSKU: *mut *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceVersion(
        phid: PhidgetHandle,
        deviceVersion: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getDeviceChannelCount(
        phid: PhidgetHandle,
        cls: Phidget_ChannelClass,
        count: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getIsHubPortDevice(
        phid: PhidgetHandle,
        isHubPortDevice: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setIsHubPortDevice(
        phid: PhidgetHandle,
        isHubPortDevice: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHub(phid: PhidgetHandle, hub: *mut PhidgetHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHubPort(
        phid: PhidgetHandle,
        hubPort: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setHubPort(
        phid: PhidgetHandle,
        hubPort: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHubPortCount(
        phid: PhidgetHandle,
        hubPortCount: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHubPortSpeed(phid: PhidgetHandle, speed: *mut u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setHubPortSpeed(phid: PhidgetHandle, speed: u32) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHubPortSupportsSetSpeed(
        phid: PhidgetHandle,
        supportsSetSpeed: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getHubPortSupportsAutoSetSpeed(
        phid: PhidgetHandle,
        supportsAutoSetSpeed: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMaxHubPortSpeed(phid: PhidgetHandle, maxSpeed: *mut u32)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getVINTDeviceSupportsSetSpeed(
        phid: PhidgetHandle,
        supportsSetSpeed: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getVINTDeviceSupportsAutoSetSpeed(
        phid: PhidgetHandle,
        supportsAutoSetSpeed: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMaxVINTDeviceSpeed(
        phid: PhidgetHandle,
        maxSpeed: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setMeshMode(phid: PhidgetHandle, mode: Phidget_MeshMode) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_getMeshMode(
        phid: PhidgetHandle,
        mode: *mut Phidget_MeshMode,
    ) -> PhidgetReturnCode;
}
pub type Phidget_OnAttachCallback = ::std::option::Option<
    unsafe extern "C" fn(phid: PhidgetHandle, ctx: *mut ::std::os::raw::c_void),
>;
pub type Phidget_OnDetachCallback = ::std::option::Option<
    unsafe extern "C" fn(phid: PhidgetHandle, ctx: *mut ::std::os::raw::c_void),
>;
pub type Phidget_OnErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phid: PhidgetHandle,
        ctx: *mut ::std::os::raw::c_void,
        errorCode: Phidget_ErrorEventCode,
        errorString: *const ::std::os::raw::c_char,
    ),
>;
pub type Phidget_OnPropertyChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phid: PhidgetHandle,
        ctx: *mut ::std::os::raw::c_void,
        property: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn Phidget_setOnDetachHandler(
        phid: PhidgetHandle,
        fptr: Phidget_OnDetachCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setOnAttachHandler(
        phid: PhidgetHandle,
        fptr: Phidget_OnAttachCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setOnErrorHandler(
        phid: PhidgetHandle,
        fptr: Phidget_OnErrorCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_setOnPropertyChangeHandler(
        phid: PhidgetHandle,
        fptr: Phidget_OnPropertyChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_validDictionaryKey(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
pub type PhidgetDictionary_OnChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PhidgetDictionary_setOnChangeCallbackHandler(
        arg1: PhidgetDictionary_OnChangeCallback,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetManager {
    _unused: [u8; 0],
}
pub type PhidgetManagerHandle = *mut _PhidgetManager;
extern "C" {
    pub fn PhidgetManager_create(phidm: *mut PhidgetManagerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetManager_delete(phidm: *mut PhidgetManagerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetManager_open(phidm: PhidgetManagerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetManager_close(phidm: PhidgetManagerHandle) -> PhidgetReturnCode;
}
pub type PhidgetManager_OnAttachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phidm: PhidgetManagerHandle,
        ctx: *mut ::std::os::raw::c_void,
        phid: PhidgetHandle,
    ),
>;
pub type PhidgetManager_OnDetachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phidm: PhidgetManagerHandle,
        ctx: *mut ::std::os::raw::c_void,
        phid: PhidgetHandle,
    ),
>;
pub type PhidgetManager_OnErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phidm: PhidgetManagerHandle,
        ctx: *mut ::std::os::raw::c_void,
        errorCode: Phidget_ErrorEventCode,
        errorString: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PhidgetManager_setOnAttachHandler(
        phidm: PhidgetManagerHandle,
        fptr: PhidgetManager_OnAttachCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetManager_setOnDetachHandler(
        phidm: PhidgetManagerHandle,
        fptr: PhidgetManager_OnDetachCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetManager_setOnErrorHandler(
        phidm: PhidgetManagerHandle,
        fptr: PhidgetManager_OnErrorCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_enable(
        level: Phidget_LogLevel,
        destination: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_disable() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_enableNetwork(
        address: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_disableNetwork() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_log(
        level: Phidget_LogLevel,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_loge(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        level: Phidget_LogLevel,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_logs(
        level: Phidget_LogLevel,
        message: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_loges(
        level: Phidget_LogLevel,
        source: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_rotate() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_enableRotating() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_disableRotating() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_isRotating(isrotating: *mut ::std::os::raw::c_int) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_getRotating(
        size: *mut u64,
        keepCount: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_setRotating(size: u64, keepCount: ::std::os::raw::c_int)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_getLevel(level: *mut Phidget_LogLevel) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_setLevel(level: Phidget_LogLevel) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_addSource(
        arg1: *const ::std::os::raw::c_char,
        level: Phidget_LogLevel,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_getSourceLevel(
        source: *const ::std::os::raw::c_char,
        level: *mut Phidget_LogLevel,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_setSourceLevel(
        source: *const ::std::os::raw::c_char,
        level: Phidget_LogLevel,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLog_getSources(
        sources: *mut *const ::std::os::raw::c_char,
        count: *mut u32,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhidgetServer {
    pub name: *const ::std::os::raw::c_char,
    pub stype: *const ::std::os::raw::c_char,
    pub type_: PhidgetServerType,
    pub flags: ::std::os::raw::c_int,
    pub addr: *const ::std::os::raw::c_char,
    pub host: *const ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    pub handle: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PhidgetServer() {
    const UNINIT: ::std::mem::MaybeUninit<PhidgetServer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhidgetServer>(),
        56usize,
        concat!("Size of: ", stringify!(PhidgetServer))
    );
    assert_eq!(
        ::std::mem::align_of::<PhidgetServer>(),
        8usize,
        concat!("Alignment of ", stringify!(PhidgetServer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PhidgetServer),
            "::",
            stringify!(handle)
        )
    );
}
pub type PhidgetServerHandle = *mut PhidgetServer;
extern "C" {
    pub fn PhidgetNet_addServer(
        serverName: *const ::std::os::raw::c_char,
        address: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        password: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_removeServer(serverName: *const ::std::os::raw::c_char) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_removeAllServers() -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_enableServer(serverName: *const ::std::os::raw::c_char) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_disableServer(
        serverName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_setServerPassword(
        serverName: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_enableServerDiscovery(serverType: PhidgetServerType) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_disableServerDiscovery(serverType: PhidgetServerType) -> PhidgetReturnCode;
}
pub type PhidgetNet_OnServerAddedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        server: PhidgetServerHandle,
        kv: *mut ::std::os::raw::c_void,
    ),
>;
pub type PhidgetNet_OnServerRemovedCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, server: PhidgetServerHandle),
>;
extern "C" {
    pub fn PhidgetNet_setOnServerAddedHandler(
        fptr: PhidgetNet_OnServerAddedCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_setOnServerRemovedHandler(
        fptr: PhidgetNet_OnServerRemovedCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_getServerAddressList(
        hostname: *const ::std::os::raw::c_char,
        addressFamily: ::std::os::raw::c_int,
        addressList: *mut *mut ::std::os::raw::c_char,
        count: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_freeServerAddressList(
        addressList: *mut *mut ::std::os::raw::c_char,
        count: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_startServer(
        flags: ::std::os::raw::c_int,
        addressFamily: ::std::os::raw::c_int,
        serverName: *const ::std::os::raw::c_char,
        address: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        password: *const ::std::os::raw::c_char,
        server: *mut PhidgetServerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetNet_stopServer(server: *mut PhidgetServerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn Phidget_enumString(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Phidget_enumFromString(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetVoltageRatioInput {
    _unused: [u8; 0],
}
pub type PhidgetVoltageRatioInputHandle = *mut _PhidgetVoltageRatioInput;
extern "C" {
    pub fn PhidgetVoltageRatioInput_create(
        ch: *mut PhidgetVoltageRatioInputHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_delete(
        ch: *mut PhidgetVoltageRatioInputHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setBridgeEnabled(
        ch: PhidgetVoltageRatioInputHandle,
        bridgeEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getBridgeEnabled(
        ch: PhidgetVoltageRatioInputHandle,
        bridgeEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setBridgeGain(
        ch: PhidgetVoltageRatioInputHandle,
        bridgeGain: PhidgetVoltageRatioInput_BridgeGain,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getBridgeGain(
        ch: PhidgetVoltageRatioInputHandle,
        bridgeGain: *mut PhidgetVoltageRatioInput_BridgeGain,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setDataInterval(
        ch: PhidgetVoltageRatioInputHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getDataInterval(
        ch: PhidgetVoltageRatioInputHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMinDataInterval(
        ch: PhidgetVoltageRatioInputHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMaxDataInterval(
        ch: PhidgetVoltageRatioInputHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setDataRate(
        ch: PhidgetVoltageRatioInputHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getDataRate(
        ch: PhidgetVoltageRatioInputHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMinDataRate(
        ch: PhidgetVoltageRatioInputHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMaxDataRate(
        ch: PhidgetVoltageRatioInputHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setSensorType(
        ch: PhidgetVoltageRatioInputHandle,
        sensorType: PhidgetVoltageRatioInput_SensorType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getSensorType(
        ch: PhidgetVoltageRatioInputHandle,
        sensorType: *mut PhidgetVoltageRatioInput_SensorType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getSensorUnit(
        ch: PhidgetVoltageRatioInputHandle,
        sensorUnit: *mut Phidget_UnitInfo,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getSensorValue(
        ch: PhidgetVoltageRatioInputHandle,
        sensorValue: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setSensorValueChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        sensorValueChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getSensorValueChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        sensorValueChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getVoltageRatio(
        ch: PhidgetVoltageRatioInputHandle,
        voltageRatio: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMinVoltageRatio(
        ch: PhidgetVoltageRatioInputHandle,
        minVoltageRatio: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMaxVoltageRatio(
        ch: PhidgetVoltageRatioInputHandle,
        maxVoltageRatio: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_setVoltageRatioChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        voltageRatioChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getVoltageRatioChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        voltageRatioChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMinVoltageRatioChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        minVoltageRatioChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageRatioInput_getMaxVoltageRatioChangeTrigger(
        ch: PhidgetVoltageRatioInputHandle,
        maxVoltageRatioChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetVoltageRatioInput_OnSensorChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetVoltageRatioInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        sensorValue: f64,
        sensorUnit: *mut Phidget_UnitInfo,
    ),
>;
extern "C" {
    pub fn PhidgetVoltageRatioInput_setOnSensorChangeHandler(
        ch: PhidgetVoltageRatioInputHandle,
        fptr: PhidgetVoltageRatioInput_OnSensorChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetVoltageRatioInput_OnVoltageRatioChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetVoltageRatioInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        voltageRatio: f64,
    ),
>;
extern "C" {
    pub fn PhidgetVoltageRatioInput_setOnVoltageRatioChangeHandler(
        ch: PhidgetVoltageRatioInputHandle,
        fptr: PhidgetVoltageRatioInput_OnVoltageRatioChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetDigitalInput {
    _unused: [u8; 0],
}
pub type PhidgetDigitalInputHandle = *mut _PhidgetDigitalInput;
extern "C" {
    pub fn PhidgetDigitalInput_create(ch: *mut PhidgetDigitalInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_delete(ch: *mut PhidgetDigitalInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_setInputMode(
        ch: PhidgetDigitalInputHandle,
        inputMode: Phidget_InputMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_getInputMode(
        ch: PhidgetDigitalInputHandle,
        inputMode: *mut Phidget_InputMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_setPowerSupply(
        ch: PhidgetDigitalInputHandle,
        powerSupply: Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_getPowerSupply(
        ch: PhidgetDigitalInputHandle,
        powerSupply: *mut Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalInput_getState(
        ch: PhidgetDigitalInputHandle,
        state: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDigitalInput_OnStateChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDigitalInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        state: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn PhidgetDigitalInput_setOnStateChangeHandler(
        ch: PhidgetDigitalInputHandle,
        fptr: PhidgetDigitalInput_OnStateChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetDigitalOutput {
    _unused: [u8; 0],
}
pub type PhidgetDigitalOutputHandle = *mut _PhidgetDigitalOutput;
extern "C" {
    pub fn PhidgetDigitalOutput_create(ch: *mut PhidgetDigitalOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_delete(ch: *mut PhidgetDigitalOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_enableFailsafe(
        ch: PhidgetDigitalOutputHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_resetFailsafe(ch: PhidgetDigitalOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setDutyCycle(
        ch: PhidgetDigitalOutputHandle,
        dutyCycle: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setDutyCycle_async(
        ch: PhidgetDigitalOutputHandle,
        dutyCycle: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetDigitalOutput_getDutyCycle(
        ch: PhidgetDigitalOutputHandle,
        dutyCycle: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMinDutyCycle(
        ch: PhidgetDigitalOutputHandle,
        minDutyCycle: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMaxDutyCycle(
        ch: PhidgetDigitalOutputHandle,
        maxDutyCycle: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMinFailsafeTime(
        ch: PhidgetDigitalOutputHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMaxFailsafeTime(
        ch: PhidgetDigitalOutputHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setFrequency(
        ch: PhidgetDigitalOutputHandle,
        frequency: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getFrequency(
        ch: PhidgetDigitalOutputHandle,
        frequency: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMinFrequency(
        ch: PhidgetDigitalOutputHandle,
        minFrequency: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMaxFrequency(
        ch: PhidgetDigitalOutputHandle,
        maxFrequency: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setLEDCurrentLimit(
        ch: PhidgetDigitalOutputHandle,
        LEDCurrentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setLEDCurrentLimit_async(
        ch: PhidgetDigitalOutputHandle,
        LEDCurrentLimit: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetDigitalOutput_getLEDCurrentLimit(
        ch: PhidgetDigitalOutputHandle,
        LEDCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMinLEDCurrentLimit(
        ch: PhidgetDigitalOutputHandle,
        minLEDCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getMaxLEDCurrentLimit(
        ch: PhidgetDigitalOutputHandle,
        maxLEDCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setLEDForwardVoltage(
        ch: PhidgetDigitalOutputHandle,
        LEDForwardVoltage: PhidgetDigitalOutput_LEDForwardVoltage,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_getLEDForwardVoltage(
        ch: PhidgetDigitalOutputHandle,
        LEDForwardVoltage: *mut PhidgetDigitalOutput_LEDForwardVoltage,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setState(
        ch: PhidgetDigitalOutputHandle,
        state: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDigitalOutput_setState_async(
        ch: PhidgetDigitalOutputHandle,
        state: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetDigitalOutput_getState(
        ch: PhidgetDigitalOutputHandle,
        state: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetRCServo {
    _unused: [u8; 0],
}
pub type PhidgetRCServoHandle = *mut _PhidgetRCServo;
extern "C" {
    pub fn PhidgetRCServo_create(ch: *mut PhidgetRCServoHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_delete(ch: *mut PhidgetRCServoHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_enableFailsafe(
        ch: PhidgetRCServoHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_resetFailsafe(ch: PhidgetRCServoHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setAcceleration(
        ch: PhidgetRCServoHandle,
        acceleration: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getAcceleration(
        ch: PhidgetRCServoHandle,
        acceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinAcceleration(
        ch: PhidgetRCServoHandle,
        minAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxAcceleration(
        ch: PhidgetRCServoHandle,
        maxAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setDataInterval(
        ch: PhidgetRCServoHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getDataInterval(
        ch: PhidgetRCServoHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinDataInterval(
        ch: PhidgetRCServoHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxDataInterval(
        ch: PhidgetRCServoHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setDataRate(ch: PhidgetRCServoHandle, dataRate: f64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getDataRate(
        ch: PhidgetRCServoHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinDataRate(
        ch: PhidgetRCServoHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxDataRate(
        ch: PhidgetRCServoHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setEngaged(
        ch: PhidgetRCServoHandle,
        engaged: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getEngaged(
        ch: PhidgetRCServoHandle,
        engaged: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinFailsafeTime(
        ch: PhidgetRCServoHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxFailsafeTime(
        ch: PhidgetRCServoHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getIsMoving(
        ch: PhidgetRCServoHandle,
        isMoving: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getPosition(
        ch: PhidgetRCServoHandle,
        position: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setMinPosition(
        ch: PhidgetRCServoHandle,
        minPosition: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinPosition(
        ch: PhidgetRCServoHandle,
        minPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setMaxPosition(
        ch: PhidgetRCServoHandle,
        maxPosition: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxPosition(
        ch: PhidgetRCServoHandle,
        maxPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setMinPulseWidth(
        ch: PhidgetRCServoHandle,
        minPulseWidth: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinPulseWidth(
        ch: PhidgetRCServoHandle,
        minPulseWidth: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setMaxPulseWidth(
        ch: PhidgetRCServoHandle,
        maxPulseWidth: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxPulseWidth(
        ch: PhidgetRCServoHandle,
        maxPulseWidth: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinPulseWidthLimit(
        ch: PhidgetRCServoHandle,
        minPulseWidthLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxPulseWidthLimit(
        ch: PhidgetRCServoHandle,
        maxPulseWidthLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setSpeedRampingState(
        ch: PhidgetRCServoHandle,
        speedRampingState: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getSpeedRampingState(
        ch: PhidgetRCServoHandle,
        speedRampingState: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setTargetPosition(
        ch: PhidgetRCServoHandle,
        targetPosition: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setTargetPosition_async(
        ch: PhidgetRCServoHandle,
        targetPosition: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetRCServo_getTargetPosition(
        ch: PhidgetRCServoHandle,
        targetPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setTorque(ch: PhidgetRCServoHandle, torque: f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getTorque(
        ch: PhidgetRCServoHandle,
        torque: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinTorque(
        ch: PhidgetRCServoHandle,
        minTorque: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxTorque(
        ch: PhidgetRCServoHandle,
        maxTorque: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getVelocity(
        ch: PhidgetRCServoHandle,
        velocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setVelocityLimit(
        ch: PhidgetRCServoHandle,
        velocityLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getVelocityLimit(
        ch: PhidgetRCServoHandle,
        velocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMinVelocityLimit(
        ch: PhidgetRCServoHandle,
        minVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getMaxVelocityLimit(
        ch: PhidgetRCServoHandle,
        maxVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_setVoltage(
        ch: PhidgetRCServoHandle,
        voltage: PhidgetRCServo_Voltage,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRCServo_getVoltage(
        ch: PhidgetRCServoHandle,
        voltage: *mut PhidgetRCServo_Voltage,
    ) -> PhidgetReturnCode;
}
pub type PhidgetRCServo_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetRCServoHandle, ctx: *mut ::std::os::raw::c_void, position: f64),
>;
extern "C" {
    pub fn PhidgetRCServo_setOnPositionChangeHandler(
        ch: PhidgetRCServoHandle,
        fptr: PhidgetRCServo_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetRCServo_OnTargetPositionReachedCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetRCServoHandle, ctx: *mut ::std::os::raw::c_void, position: f64),
>;
extern "C" {
    pub fn PhidgetRCServo_setOnTargetPositionReachedHandler(
        ch: PhidgetRCServoHandle,
        fptr: PhidgetRCServo_OnTargetPositionReachedCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetRCServo_OnVelocityChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetRCServoHandle, ctx: *mut ::std::os::raw::c_void, velocity: f64),
>;
extern "C" {
    pub fn PhidgetRCServo_setOnVelocityChangeHandler(
        ch: PhidgetRCServoHandle,
        fptr: PhidgetRCServo_OnVelocityChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetVoltageOutput {
    _unused: [u8; 0],
}
pub type PhidgetVoltageOutputHandle = *mut _PhidgetVoltageOutput;
extern "C" {
    pub fn PhidgetVoltageOutput_create(ch: *mut PhidgetVoltageOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_delete(ch: *mut PhidgetVoltageOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_enableFailsafe(
        ch: PhidgetVoltageOutputHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_resetFailsafe(ch: PhidgetVoltageOutputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_setEnabled(
        ch: PhidgetVoltageOutputHandle,
        enabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getEnabled(
        ch: PhidgetVoltageOutputHandle,
        enabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getMinFailsafeTime(
        ch: PhidgetVoltageOutputHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getMaxFailsafeTime(
        ch: PhidgetVoltageOutputHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_setVoltage(
        ch: PhidgetVoltageOutputHandle,
        voltage: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_setVoltage_async(
        ch: PhidgetVoltageOutputHandle,
        voltage: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetVoltageOutput_getVoltage(
        ch: PhidgetVoltageOutputHandle,
        voltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getMinVoltage(
        ch: PhidgetVoltageOutputHandle,
        minVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getMaxVoltage(
        ch: PhidgetVoltageOutputHandle,
        maxVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_setVoltageOutputRange(
        ch: PhidgetVoltageOutputHandle,
        voltageOutputRange: PhidgetVoltageOutput_VoltageOutputRange,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageOutput_getVoltageOutputRange(
        ch: PhidgetVoltageOutputHandle,
        voltageOutputRange: *mut PhidgetVoltageOutput_VoltageOutputRange,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetAccelerometer {
    _unused: [u8; 0],
}
pub type PhidgetAccelerometerHandle = *mut _PhidgetAccelerometer;
extern "C" {
    pub fn PhidgetAccelerometer_create(ch: *mut PhidgetAccelerometerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_delete(ch: *mut PhidgetAccelerometerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getAcceleration(
        ch: PhidgetAccelerometerHandle,
        acceleration: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMinAcceleration(
        ch: PhidgetAccelerometerHandle,
        minAcceleration: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMaxAcceleration(
        ch: PhidgetAccelerometerHandle,
        maxAcceleration: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_setAccelerationChangeTrigger(
        ch: PhidgetAccelerometerHandle,
        accelerationChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getAccelerationChangeTrigger(
        ch: PhidgetAccelerometerHandle,
        accelerationChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMinAccelerationChangeTrigger(
        ch: PhidgetAccelerometerHandle,
        minAccelerationChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMaxAccelerationChangeTrigger(
        ch: PhidgetAccelerometerHandle,
        maxAccelerationChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getAxisCount(
        ch: PhidgetAccelerometerHandle,
        axisCount: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_setDataInterval(
        ch: PhidgetAccelerometerHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getDataInterval(
        ch: PhidgetAccelerometerHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMinDataInterval(
        ch: PhidgetAccelerometerHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMaxDataInterval(
        ch: PhidgetAccelerometerHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_setDataRate(
        ch: PhidgetAccelerometerHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getDataRate(
        ch: PhidgetAccelerometerHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMinDataRate(
        ch: PhidgetAccelerometerHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getMaxDataRate(
        ch: PhidgetAccelerometerHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_setHeatingEnabled(
        ch: PhidgetAccelerometerHandle,
        heatingEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getHeatingEnabled(
        ch: PhidgetAccelerometerHandle,
        heatingEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetAccelerometer_getTimestamp(
        ch: PhidgetAccelerometerHandle,
        timestamp: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetAccelerometer_OnAccelerationChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetAccelerometerHandle,
        ctx: *mut ::std::os::raw::c_void,
        acceleration: *const f64,
        timestamp: f64,
    ),
>;
extern "C" {
    pub fn PhidgetAccelerometer_setOnAccelerationChangeHandler(
        ch: PhidgetAccelerometerHandle,
        fptr: PhidgetAccelerometer_OnAccelerationChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetVoltageInput {
    _unused: [u8; 0],
}
pub type PhidgetVoltageInputHandle = *mut _PhidgetVoltageInput;
extern "C" {
    pub fn PhidgetVoltageInput_create(ch: *mut PhidgetVoltageInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_delete(ch: *mut PhidgetVoltageInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setDataInterval(
        ch: PhidgetVoltageInputHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getDataInterval(
        ch: PhidgetVoltageInputHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMinDataInterval(
        ch: PhidgetVoltageInputHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMaxDataInterval(
        ch: PhidgetVoltageInputHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setDataRate(
        ch: PhidgetVoltageInputHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getDataRate(
        ch: PhidgetVoltageInputHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMinDataRate(
        ch: PhidgetVoltageInputHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMaxDataRate(
        ch: PhidgetVoltageInputHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setPowerSupply(
        ch: PhidgetVoltageInputHandle,
        powerSupply: Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getPowerSupply(
        ch: PhidgetVoltageInputHandle,
        powerSupply: *mut Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setSensorType(
        ch: PhidgetVoltageInputHandle,
        sensorType: PhidgetVoltageInput_SensorType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getSensorType(
        ch: PhidgetVoltageInputHandle,
        sensorType: *mut PhidgetVoltageInput_SensorType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getSensorUnit(
        ch: PhidgetVoltageInputHandle,
        sensorUnit: *mut Phidget_UnitInfo,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getSensorValue(
        ch: PhidgetVoltageInputHandle,
        sensorValue: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setSensorValueChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        sensorValueChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getSensorValueChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        sensorValueChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getVoltage(
        ch: PhidgetVoltageInputHandle,
        voltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMinVoltage(
        ch: PhidgetVoltageInputHandle,
        minVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMaxVoltage(
        ch: PhidgetVoltageInputHandle,
        maxVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setVoltageChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        voltageChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getVoltageChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        voltageChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMinVoltageChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        minVoltageChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getMaxVoltageChangeTrigger(
        ch: PhidgetVoltageInputHandle,
        maxVoltageChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_setVoltageRange(
        ch: PhidgetVoltageInputHandle,
        voltageRange: PhidgetVoltageInput_VoltageRange,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetVoltageInput_getVoltageRange(
        ch: PhidgetVoltageInputHandle,
        voltageRange: *mut PhidgetVoltageInput_VoltageRange,
    ) -> PhidgetReturnCode;
}
pub type PhidgetVoltageInput_OnSensorChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetVoltageInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        sensorValue: f64,
        sensorUnit: *mut Phidget_UnitInfo,
    ),
>;
extern "C" {
    pub fn PhidgetVoltageInput_setOnSensorChangeHandler(
        ch: PhidgetVoltageInputHandle,
        fptr: PhidgetVoltageInput_OnSensorChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetVoltageInput_OnVoltageChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetVoltageInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        voltage: f64,
    ),
>;
extern "C" {
    pub fn PhidgetVoltageInput_setOnVoltageChangeHandler(
        ch: PhidgetVoltageInputHandle,
        fptr: PhidgetVoltageInput_OnVoltageChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetCapacitiveTouch {
    _unused: [u8; 0],
}
pub type PhidgetCapacitiveTouchHandle = *mut _PhidgetCapacitiveTouch;
extern "C" {
    pub fn PhidgetCapacitiveTouch_create(
        ch: *mut PhidgetCapacitiveTouchHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_delete(
        ch: *mut PhidgetCapacitiveTouchHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_setDataInterval(
        ch: PhidgetCapacitiveTouchHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getDataInterval(
        ch: PhidgetCapacitiveTouchHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMinDataInterval(
        ch: PhidgetCapacitiveTouchHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMaxDataInterval(
        ch: PhidgetCapacitiveTouchHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_setDataRate(
        ch: PhidgetCapacitiveTouchHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getDataRate(
        ch: PhidgetCapacitiveTouchHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMinDataRate(
        ch: PhidgetCapacitiveTouchHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMaxDataRate(
        ch: PhidgetCapacitiveTouchHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_setSensitivity(
        ch: PhidgetCapacitiveTouchHandle,
        sensitivity: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getSensitivity(
        ch: PhidgetCapacitiveTouchHandle,
        sensitivity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMinSensitivity(
        ch: PhidgetCapacitiveTouchHandle,
        minSensitivity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMaxSensitivity(
        ch: PhidgetCapacitiveTouchHandle,
        maxSensitivity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getIsTouched(
        ch: PhidgetCapacitiveTouchHandle,
        isTouched: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getTouchValue(
        ch: PhidgetCapacitiveTouchHandle,
        touchValue: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMinTouchValue(
        ch: PhidgetCapacitiveTouchHandle,
        minTouchValue: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMaxTouchValue(
        ch: PhidgetCapacitiveTouchHandle,
        maxTouchValue: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_setTouchValueChangeTrigger(
        ch: PhidgetCapacitiveTouchHandle,
        touchValueChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getTouchValueChangeTrigger(
        ch: PhidgetCapacitiveTouchHandle,
        touchValueChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMinTouchValueChangeTrigger(
        ch: PhidgetCapacitiveTouchHandle,
        minTouchValueChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCapacitiveTouch_getMaxTouchValueChangeTrigger(
        ch: PhidgetCapacitiveTouchHandle,
        maxTouchValueChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetCapacitiveTouch_OnTouchCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetCapacitiveTouchHandle,
        ctx: *mut ::std::os::raw::c_void,
        touchValue: f64,
    ),
>;
extern "C" {
    pub fn PhidgetCapacitiveTouch_setOnTouchHandler(
        ch: PhidgetCapacitiveTouchHandle,
        fptr: PhidgetCapacitiveTouch_OnTouchCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetCapacitiveTouch_OnTouchEndCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetCapacitiveTouchHandle, ctx: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn PhidgetCapacitiveTouch_setOnTouchEndHandler(
        ch: PhidgetCapacitiveTouchHandle,
        fptr: PhidgetCapacitiveTouch_OnTouchEndCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetRFID {
    _unused: [u8; 0],
}
pub type PhidgetRFIDHandle = *mut _PhidgetRFID;
extern "C" {
    pub fn PhidgetRFID_create(ch: *mut PhidgetRFIDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_delete(ch: *mut PhidgetRFIDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_getLastTag(
        ch: PhidgetRFIDHandle,
        tagString: *mut ::std::os::raw::c_char,
        tagStringLen: usize,
        protocol: *mut PhidgetRFID_Protocol,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_write(
        ch: PhidgetRFIDHandle,
        tagString: *const ::std::os::raw::c_char,
        protocol: PhidgetRFID_Protocol,
        lockTag: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_setAntennaEnabled(
        ch: PhidgetRFIDHandle,
        antennaEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_getAntennaEnabled(
        ch: PhidgetRFIDHandle,
        antennaEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetRFID_getTagPresent(
        ch: PhidgetRFIDHandle,
        tagPresent: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
pub type PhidgetRFID_OnTagCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetRFIDHandle,
        ctx: *mut ::std::os::raw::c_void,
        tag: *const ::std::os::raw::c_char,
        protocol: PhidgetRFID_Protocol,
    ),
>;
extern "C" {
    pub fn PhidgetRFID_setOnTagHandler(
        ch: PhidgetRFIDHandle,
        fptr: PhidgetRFID_OnTagCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetRFID_OnTagLostCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetRFIDHandle,
        ctx: *mut ::std::os::raw::c_void,
        tag: *const ::std::os::raw::c_char,
        protocol: PhidgetRFID_Protocol,
    ),
>;
extern "C" {
    pub fn PhidgetRFID_setOnTagLostHandler(
        ch: PhidgetRFIDHandle,
        fptr: PhidgetRFID_OnTagLostCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetGPS {
    _unused: [u8; 0],
}
pub type PhidgetGPSHandle = *mut _PhidgetGPS;
extern "C" {
    pub fn PhidgetGPS_create(ch: *mut PhidgetGPSHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_delete(ch: *mut PhidgetGPSHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getAltitude(ch: PhidgetGPSHandle, altitude: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getDate(
        ch: PhidgetGPSHandle,
        date: *mut PhidgetGPS_Date,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getHeading(ch: PhidgetGPSHandle, heading: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getLatitude(ch: PhidgetGPSHandle, latitude: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getLongitude(ch: PhidgetGPSHandle, longitude: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getNMEAData(
        ch: PhidgetGPSHandle,
        NMEAData: *mut PhidgetGPS_NMEAData,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getPositionFixState(
        ch: PhidgetGPSHandle,
        positionFixState: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getTime(
        ch: PhidgetGPSHandle,
        time: *mut PhidgetGPS_Time,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGPS_getVelocity(ch: PhidgetGPSHandle, velocity: *mut f64) -> PhidgetReturnCode;
}
pub type PhidgetGPS_OnHeadingChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetGPSHandle,
        ctx: *mut ::std::os::raw::c_void,
        heading: f64,
        velocity: f64,
    ),
>;
extern "C" {
    pub fn PhidgetGPS_setOnHeadingChangeHandler(
        ch: PhidgetGPSHandle,
        fptr: PhidgetGPS_OnHeadingChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetGPS_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetGPSHandle,
        ctx: *mut ::std::os::raw::c_void,
        latitude: f64,
        longitude: f64,
        altitude: f64,
    ),
>;
extern "C" {
    pub fn PhidgetGPS_setOnPositionChangeHandler(
        ch: PhidgetGPSHandle,
        fptr: PhidgetGPS_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetGPS_OnPositionFixStateChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetGPSHandle,
        ctx: *mut ::std::os::raw::c_void,
        positionFixState: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn PhidgetGPS_setOnPositionFixStateChangeHandler(
        ch: PhidgetGPSHandle,
        fptr: PhidgetGPS_OnPositionFixStateChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetGyroscope {
    _unused: [u8; 0],
}
pub type PhidgetGyroscopeHandle = *mut _PhidgetGyroscope;
extern "C" {
    pub fn PhidgetGyroscope_create(ch: *mut PhidgetGyroscopeHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_delete(ch: *mut PhidgetGyroscopeHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_zero(ch: PhidgetGyroscopeHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getAngularRate(
        ch: PhidgetGyroscopeHandle,
        angularRate: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMinAngularRate(
        ch: PhidgetGyroscopeHandle,
        minAngularRate: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMaxAngularRate(
        ch: PhidgetGyroscopeHandle,
        maxAngularRate: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getAxisCount(
        ch: PhidgetGyroscopeHandle,
        axisCount: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_setDataInterval(
        ch: PhidgetGyroscopeHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getDataInterval(
        ch: PhidgetGyroscopeHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMinDataInterval(
        ch: PhidgetGyroscopeHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMaxDataInterval(
        ch: PhidgetGyroscopeHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_setDataRate(
        ch: PhidgetGyroscopeHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getDataRate(
        ch: PhidgetGyroscopeHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMinDataRate(
        ch: PhidgetGyroscopeHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getMaxDataRate(
        ch: PhidgetGyroscopeHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_setHeatingEnabled(
        ch: PhidgetGyroscopeHandle,
        heatingEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getHeatingEnabled(
        ch: PhidgetGyroscopeHandle,
        heatingEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetGyroscope_getTimestamp(
        ch: PhidgetGyroscopeHandle,
        timestamp: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetGyroscope_OnAngularRateUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetGyroscopeHandle,
        ctx: *mut ::std::os::raw::c_void,
        angularRate: *const f64,
        timestamp: f64,
    ),
>;
extern "C" {
    pub fn PhidgetGyroscope_setOnAngularRateUpdateHandler(
        ch: PhidgetGyroscopeHandle,
        fptr: PhidgetGyroscope_OnAngularRateUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetMagnetometer {
    _unused: [u8; 0],
}
pub type PhidgetMagnetometerHandle = *mut _PhidgetMagnetometer;
extern "C" {
    pub fn PhidgetMagnetometer_create(ch: *mut PhidgetMagnetometerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_delete(ch: *mut PhidgetMagnetometerHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_setCorrectionParameters(
        ch: PhidgetMagnetometerHandle,
        magneticField: f64,
        offset0: f64,
        offset1: f64,
        offset2: f64,
        gain0: f64,
        gain1: f64,
        gain2: f64,
        T0: f64,
        T1: f64,
        T2: f64,
        T3: f64,
        T4: f64,
        T5: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_resetCorrectionParameters(
        ch: PhidgetMagnetometerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_saveCorrectionParameters(
        ch: PhidgetMagnetometerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getAxisCount(
        ch: PhidgetMagnetometerHandle,
        axisCount: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_setDataInterval(
        ch: PhidgetMagnetometerHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getDataInterval(
        ch: PhidgetMagnetometerHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMinDataInterval(
        ch: PhidgetMagnetometerHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMaxDataInterval(
        ch: PhidgetMagnetometerHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_setDataRate(
        ch: PhidgetMagnetometerHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getDataRate(
        ch: PhidgetMagnetometerHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMinDataRate(
        ch: PhidgetMagnetometerHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMaxDataRate(
        ch: PhidgetMagnetometerHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_setHeatingEnabled(
        ch: PhidgetMagnetometerHandle,
        heatingEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getHeatingEnabled(
        ch: PhidgetMagnetometerHandle,
        heatingEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMagneticField(
        ch: PhidgetMagnetometerHandle,
        magneticField: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMinMagneticField(
        ch: PhidgetMagnetometerHandle,
        minMagneticField: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMaxMagneticField(
        ch: PhidgetMagnetometerHandle,
        maxMagneticField: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_setMagneticFieldChangeTrigger(
        ch: PhidgetMagnetometerHandle,
        magneticFieldChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMagneticFieldChangeTrigger(
        ch: PhidgetMagnetometerHandle,
        magneticFieldChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMinMagneticFieldChangeTrigger(
        ch: PhidgetMagnetometerHandle,
        minMagneticFieldChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getMaxMagneticFieldChangeTrigger(
        ch: PhidgetMagnetometerHandle,
        maxMagneticFieldChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMagnetometer_getTimestamp(
        ch: PhidgetMagnetometerHandle,
        timestamp: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetMagnetometer_OnMagneticFieldChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetMagnetometerHandle,
        ctx: *mut ::std::os::raw::c_void,
        magneticField: *const f64,
        timestamp: f64,
    ),
>;
extern "C" {
    pub fn PhidgetMagnetometer_setOnMagneticFieldChangeHandler(
        ch: PhidgetMagnetometerHandle,
        fptr: PhidgetMagnetometer_OnMagneticFieldChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetSpatial {
    _unused: [u8; 0],
}
pub type PhidgetSpatialHandle = *mut _PhidgetSpatial;
extern "C" {
    pub fn PhidgetSpatial_create(ch: *mut PhidgetSpatialHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_delete(ch: *mut PhidgetSpatialHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setAHRSParameters(
        ch: PhidgetSpatialHandle,
        angularVelocityThreshold: f64,
        angularVelocityDeltaThreshold: f64,
        accelerationThreshold: f64,
        magTime: f64,
        accelTime: f64,
        biasTime: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setMagnetometerCorrectionParameters(
        ch: PhidgetSpatialHandle,
        magneticField: f64,
        offset0: f64,
        offset1: f64,
        offset2: f64,
        gain0: f64,
        gain1: f64,
        gain2: f64,
        T0: f64,
        T1: f64,
        T2: f64,
        T3: f64,
        T4: f64,
        T5: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_resetMagnetometerCorrectionParameters(
        ch: PhidgetSpatialHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_saveMagnetometerCorrectionParameters(
        ch: PhidgetSpatialHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_zeroAlgorithm(ch: PhidgetSpatialHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_zeroGyro(ch: PhidgetSpatialHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMinAcceleration(
        ch: PhidgetSpatialHandle,
        minAcceleration: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMaxAcceleration(
        ch: PhidgetSpatialHandle,
        maxAcceleration: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setAlgorithm(
        ch: PhidgetSpatialHandle,
        algorithm: Phidget_SpatialAlgorithm,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getAlgorithm(
        ch: PhidgetSpatialHandle,
        algorithm: *mut Phidget_SpatialAlgorithm,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setAlgorithmMagnetometerGain(
        ch: PhidgetSpatialHandle,
        algorithmMagnetometerGain: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getAlgorithmMagnetometerGain(
        ch: PhidgetSpatialHandle,
        algorithmMagnetometerGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMinAngularRate(
        ch: PhidgetSpatialHandle,
        minAngularRate: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMaxAngularRate(
        ch: PhidgetSpatialHandle,
        maxAngularRate: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setDataInterval(
        ch: PhidgetSpatialHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getDataInterval(
        ch: PhidgetSpatialHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMinDataInterval(
        ch: PhidgetSpatialHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMaxDataInterval(
        ch: PhidgetSpatialHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setDataRate(ch: PhidgetSpatialHandle, dataRate: f64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getDataRate(
        ch: PhidgetSpatialHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMinDataRate(
        ch: PhidgetSpatialHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMaxDataRate(
        ch: PhidgetSpatialHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getEulerAngles(
        ch: PhidgetSpatialHandle,
        eulerAngles: *mut PhidgetSpatial_SpatialEulerAngles,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_setHeatingEnabled(
        ch: PhidgetSpatialHandle,
        heatingEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getHeatingEnabled(
        ch: PhidgetSpatialHandle,
        heatingEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMinMagneticField(
        ch: PhidgetSpatialHandle,
        minMagneticField: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getMaxMagneticField(
        ch: PhidgetSpatialHandle,
        maxMagneticField: *mut [f64; 3usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSpatial_getQuaternion(
        ch: PhidgetSpatialHandle,
        quaternion: *mut PhidgetSpatial_SpatialQuaternion,
    ) -> PhidgetReturnCode;
}
pub type PhidgetSpatial_OnAlgorithmDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetSpatialHandle,
        ctx: *mut ::std::os::raw::c_void,
        quaternion: *const f64,
        timestamp: f64,
    ),
>;
extern "C" {
    pub fn PhidgetSpatial_setOnAlgorithmDataHandler(
        ch: PhidgetSpatialHandle,
        fptr: PhidgetSpatial_OnAlgorithmDataCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetSpatial_OnSpatialDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetSpatialHandle,
        ctx: *mut ::std::os::raw::c_void,
        acceleration: *const f64,
        angularRate: *const f64,
        magneticField: *const f64,
        timestamp: f64,
    ),
>;
extern "C" {
    pub fn PhidgetSpatial_setOnSpatialDataHandler(
        ch: PhidgetSpatialHandle,
        fptr: PhidgetSpatial_OnSpatialDataCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetTemperatureSensor {
    _unused: [u8; 0],
}
pub type PhidgetTemperatureSensorHandle = *mut _PhidgetTemperatureSensor;
extern "C" {
    pub fn PhidgetTemperatureSensor_create(
        ch: *mut PhidgetTemperatureSensorHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_delete(
        ch: *mut PhidgetTemperatureSensorHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setDataInterval(
        ch: PhidgetTemperatureSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getDataInterval(
        ch: PhidgetTemperatureSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMinDataInterval(
        ch: PhidgetTemperatureSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMaxDataInterval(
        ch: PhidgetTemperatureSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setDataRate(
        ch: PhidgetTemperatureSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getDataRate(
        ch: PhidgetTemperatureSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMinDataRate(
        ch: PhidgetTemperatureSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMaxDataRate(
        ch: PhidgetTemperatureSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setRTDType(
        ch: PhidgetTemperatureSensorHandle,
        RTDType: PhidgetTemperatureSensor_RTDType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getRTDType(
        ch: PhidgetTemperatureSensorHandle,
        RTDType: *mut PhidgetTemperatureSensor_RTDType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setRTDWireSetup(
        ch: PhidgetTemperatureSensorHandle,
        RTDWireSetup: Phidget_RTDWireSetup,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getRTDWireSetup(
        ch: PhidgetTemperatureSensorHandle,
        RTDWireSetup: *mut Phidget_RTDWireSetup,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getTemperature(
        ch: PhidgetTemperatureSensorHandle,
        temperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMinTemperature(
        ch: PhidgetTemperatureSensorHandle,
        minTemperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMaxTemperature(
        ch: PhidgetTemperatureSensorHandle,
        maxTemperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setTemperatureChangeTrigger(
        ch: PhidgetTemperatureSensorHandle,
        temperatureChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getTemperatureChangeTrigger(
        ch: PhidgetTemperatureSensorHandle,
        temperatureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMinTemperatureChangeTrigger(
        ch: PhidgetTemperatureSensorHandle,
        minTemperatureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getMaxTemperatureChangeTrigger(
        ch: PhidgetTemperatureSensorHandle,
        maxTemperatureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_setThermocoupleType(
        ch: PhidgetTemperatureSensorHandle,
        thermocoupleType: PhidgetTemperatureSensor_ThermocoupleType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetTemperatureSensor_getThermocoupleType(
        ch: PhidgetTemperatureSensorHandle,
        thermocoupleType: *mut PhidgetTemperatureSensor_ThermocoupleType,
    ) -> PhidgetReturnCode;
}
pub type PhidgetTemperatureSensor_OnTemperatureChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetTemperatureSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        temperature: f64,
    ),
>;
extern "C" {
    pub fn PhidgetTemperatureSensor_setOnTemperatureChangeHandler(
        ch: PhidgetTemperatureSensorHandle,
        fptr: PhidgetTemperatureSensor_OnTemperatureChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetEncoder {
    _unused: [u8; 0],
}
pub type PhidgetEncoderHandle = *mut _PhidgetEncoder;
extern "C" {
    pub fn PhidgetEncoder_create(ch: *mut PhidgetEncoderHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_delete(ch: *mut PhidgetEncoderHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setEnabled(
        ch: PhidgetEncoderHandle,
        enabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getEnabled(
        ch: PhidgetEncoderHandle,
        enabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setDataInterval(
        ch: PhidgetEncoderHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getDataInterval(
        ch: PhidgetEncoderHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMinDataInterval(
        ch: PhidgetEncoderHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMaxDataInterval(
        ch: PhidgetEncoderHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setDataRate(ch: PhidgetEncoderHandle, dataRate: f64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getDataRate(
        ch: PhidgetEncoderHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMinDataRate(
        ch: PhidgetEncoderHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMaxDataRate(
        ch: PhidgetEncoderHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getIndexPosition(
        ch: PhidgetEncoderHandle,
        indexPosition: *mut i64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setIOMode(
        ch: PhidgetEncoderHandle,
        IOMode: Phidget_EncoderIOMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getIOMode(
        ch: PhidgetEncoderHandle,
        IOMode: *mut Phidget_EncoderIOMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setPosition(ch: PhidgetEncoderHandle, position: i64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getPosition(
        ch: PhidgetEncoderHandle,
        position: *mut i64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_setPositionChangeTrigger(
        ch: PhidgetEncoderHandle,
        positionChangeTrigger: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getPositionChangeTrigger(
        ch: PhidgetEncoderHandle,
        positionChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMinPositionChangeTrigger(
        ch: PhidgetEncoderHandle,
        minPositionChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetEncoder_getMaxPositionChangeTrigger(
        ch: PhidgetEncoderHandle,
        maxPositionChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
pub type PhidgetEncoder_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetEncoderHandle,
        ctx: *mut ::std::os::raw::c_void,
        positionChange: ::std::os::raw::c_int,
        timeChange: f64,
        indexTriggered: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn PhidgetEncoder_setOnPositionChangeHandler(
        ch: PhidgetEncoderHandle,
        fptr: PhidgetEncoder_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetFrequencyCounter {
    _unused: [u8; 0],
}
pub type PhidgetFrequencyCounterHandle = *mut _PhidgetFrequencyCounter;
extern "C" {
    pub fn PhidgetFrequencyCounter_create(
        ch: *mut PhidgetFrequencyCounterHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_delete(
        ch: *mut PhidgetFrequencyCounterHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_reset(ch: PhidgetFrequencyCounterHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getCount(
        ch: PhidgetFrequencyCounterHandle,
        count: *mut u64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setEnabled(
        ch: PhidgetFrequencyCounterHandle,
        enabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getEnabled(
        ch: PhidgetFrequencyCounterHandle,
        enabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setDataInterval(
        ch: PhidgetFrequencyCounterHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getDataInterval(
        ch: PhidgetFrequencyCounterHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMinDataInterval(
        ch: PhidgetFrequencyCounterHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMaxDataInterval(
        ch: PhidgetFrequencyCounterHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setDataRate(
        ch: PhidgetFrequencyCounterHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getDataRate(
        ch: PhidgetFrequencyCounterHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMinDataRate(
        ch: PhidgetFrequencyCounterHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMaxDataRate(
        ch: PhidgetFrequencyCounterHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setFilterType(
        ch: PhidgetFrequencyCounterHandle,
        filterType: PhidgetFrequencyCounter_FilterType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getFilterType(
        ch: PhidgetFrequencyCounterHandle,
        filterType: *mut PhidgetFrequencyCounter_FilterType,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getFrequency(
        ch: PhidgetFrequencyCounterHandle,
        frequency: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMaxFrequency(
        ch: PhidgetFrequencyCounterHandle,
        maxFrequency: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setFrequencyCutoff(
        ch: PhidgetFrequencyCounterHandle,
        frequencyCutoff: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getFrequencyCutoff(
        ch: PhidgetFrequencyCounterHandle,
        frequencyCutoff: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMinFrequencyCutoff(
        ch: PhidgetFrequencyCounterHandle,
        minFrequencyCutoff: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getMaxFrequencyCutoff(
        ch: PhidgetFrequencyCounterHandle,
        maxFrequencyCutoff: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setInputMode(
        ch: PhidgetFrequencyCounterHandle,
        inputMode: Phidget_InputMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getInputMode(
        ch: PhidgetFrequencyCounterHandle,
        inputMode: *mut Phidget_InputMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_setPowerSupply(
        ch: PhidgetFrequencyCounterHandle,
        powerSupply: Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getPowerSupply(
        ch: PhidgetFrequencyCounterHandle,
        powerSupply: *mut Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetFrequencyCounter_getTimeElapsed(
        ch: PhidgetFrequencyCounterHandle,
        timeElapsed: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetFrequencyCounter_OnCountChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetFrequencyCounterHandle,
        ctx: *mut ::std::os::raw::c_void,
        counts: u64,
        timeChange: f64,
    ),
>;
extern "C" {
    pub fn PhidgetFrequencyCounter_setOnCountChangeHandler(
        ch: PhidgetFrequencyCounterHandle,
        fptr: PhidgetFrequencyCounter_OnCountChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetFrequencyCounter_OnFrequencyChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetFrequencyCounterHandle,
        ctx: *mut ::std::os::raw::c_void,
        frequency: f64,
    ),
>;
extern "C" {
    pub fn PhidgetFrequencyCounter_setOnFrequencyChangeHandler(
        ch: PhidgetFrequencyCounterHandle,
        fptr: PhidgetFrequencyCounter_OnFrequencyChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetIR {
    _unused: [u8; 0],
}
pub type PhidgetIRHandle = *mut _PhidgetIR;
extern "C" {
    pub fn PhidgetIR_create(ch: *mut PhidgetIRHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_delete(ch: *mut PhidgetIRHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_getLastCode(
        ch: PhidgetIRHandle,
        code: *mut ::std::os::raw::c_char,
        codeLen: usize,
        bitCount: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_getLastLearnedCode(
        ch: PhidgetIRHandle,
        code: *mut ::std::os::raw::c_char,
        codeLen: usize,
        codeInfo: *mut PhidgetIR_CodeInfo,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_transmit(
        ch: PhidgetIRHandle,
        code: *const ::std::os::raw::c_char,
        codeInfo: *mut PhidgetIR_CodeInfo,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_transmitRaw(
        ch: PhidgetIRHandle,
        data: *const u32,
        dataLen: usize,
        carrierFrequency: u32,
        dutyCycle: f64,
        gap: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetIR_transmitRepeat(ch: PhidgetIRHandle) -> PhidgetReturnCode;
}
pub type PhidgetIR_OnCodeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetIRHandle,
        ctx: *mut ::std::os::raw::c_void,
        code: *const ::std::os::raw::c_char,
        bitCount: u32,
        isRepeat: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn PhidgetIR_setOnCodeHandler(
        ch: PhidgetIRHandle,
        fptr: PhidgetIR_OnCodeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetIR_OnLearnCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetIRHandle,
        ctx: *mut ::std::os::raw::c_void,
        code: *const ::std::os::raw::c_char,
        codeInfo: *mut PhidgetIR_CodeInfo,
    ),
>;
extern "C" {
    pub fn PhidgetIR_setOnLearnHandler(
        ch: PhidgetIRHandle,
        fptr: PhidgetIR_OnLearnCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetIR_OnRawDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetIRHandle,
        ctx: *mut ::std::os::raw::c_void,
        data: *const u32,
        dataLen: usize,
    ),
>;
extern "C" {
    pub fn PhidgetIR_setOnRawDataHandler(
        ch: PhidgetIRHandle,
        fptr: PhidgetIR_OnRawDataCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetPHSensor {
    _unused: [u8; 0],
}
pub type PhidgetPHSensorHandle = *mut _PhidgetPHSensor;
extern "C" {
    pub fn PhidgetPHSensor_create(ch: *mut PhidgetPHSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_delete(ch: *mut PhidgetPHSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_setCorrectionTemperature(
        ch: PhidgetPHSensorHandle,
        correctionTemperature: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getCorrectionTemperature(
        ch: PhidgetPHSensorHandle,
        correctionTemperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMinCorrectionTemperature(
        ch: PhidgetPHSensorHandle,
        minCorrectionTemperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMaxCorrectionTemperature(
        ch: PhidgetPHSensorHandle,
        maxCorrectionTemperature: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_setDataInterval(
        ch: PhidgetPHSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getDataInterval(
        ch: PhidgetPHSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMinDataInterval(
        ch: PhidgetPHSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMaxDataInterval(
        ch: PhidgetPHSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_setDataRate(
        ch: PhidgetPHSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getDataRate(
        ch: PhidgetPHSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMinDataRate(
        ch: PhidgetPHSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMaxDataRate(
        ch: PhidgetPHSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getPH(ch: PhidgetPHSensorHandle, PH: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMinPH(
        ch: PhidgetPHSensorHandle,
        minPH: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMaxPH(
        ch: PhidgetPHSensorHandle,
        maxPH: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_setPHChangeTrigger(
        ch: PhidgetPHSensorHandle,
        PHChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getPHChangeTrigger(
        ch: PhidgetPHSensorHandle,
        PHChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMinPHChangeTrigger(
        ch: PhidgetPHSensorHandle,
        minPHChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPHSensor_getMaxPHChangeTrigger(
        ch: PhidgetPHSensorHandle,
        maxPHChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetPHSensor_OnPHChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetPHSensorHandle, ctx: *mut ::std::os::raw::c_void, PH: f64),
>;
extern "C" {
    pub fn PhidgetPHSensor_setOnPHChangeHandler(
        ch: PhidgetPHSensorHandle,
        fptr: PhidgetPHSensor_OnPHChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetDCMotor {
    _unused: [u8; 0],
}
pub type PhidgetDCMotorHandle = *mut _PhidgetDCMotor;
extern "C" {
    pub fn PhidgetDCMotor_create(ch: *mut PhidgetDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_delete(ch: *mut PhidgetDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_enableFailsafe(
        ch: PhidgetDCMotorHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_resetFailsafe(ch: PhidgetDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setAcceleration(
        ch: PhidgetDCMotorHandle,
        acceleration: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getAcceleration(
        ch: PhidgetDCMotorHandle,
        acceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinAcceleration(
        ch: PhidgetDCMotorHandle,
        minAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxAcceleration(
        ch: PhidgetDCMotorHandle,
        maxAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getBackEMF(
        ch: PhidgetDCMotorHandle,
        backEMF: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setBackEMFSensingState(
        ch: PhidgetDCMotorHandle,
        backEMFSensingState: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getBackEMFSensingState(
        ch: PhidgetDCMotorHandle,
        backEMFSensingState: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getBrakingStrength(
        ch: PhidgetDCMotorHandle,
        brakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinBrakingStrength(
        ch: PhidgetDCMotorHandle,
        minBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxBrakingStrength(
        ch: PhidgetDCMotorHandle,
        maxBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setCurrentLimit(
        ch: PhidgetDCMotorHandle,
        currentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getCurrentLimit(
        ch: PhidgetDCMotorHandle,
        currentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinCurrentLimit(
        ch: PhidgetDCMotorHandle,
        minCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxCurrentLimit(
        ch: PhidgetDCMotorHandle,
        maxCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setCurrentRegulatorGain(
        ch: PhidgetDCMotorHandle,
        currentRegulatorGain: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getCurrentRegulatorGain(
        ch: PhidgetDCMotorHandle,
        currentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinCurrentRegulatorGain(
        ch: PhidgetDCMotorHandle,
        minCurrentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxCurrentRegulatorGain(
        ch: PhidgetDCMotorHandle,
        maxCurrentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setDataInterval(
        ch: PhidgetDCMotorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getDataInterval(
        ch: PhidgetDCMotorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinDataInterval(
        ch: PhidgetDCMotorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxDataInterval(
        ch: PhidgetDCMotorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setDataRate(ch: PhidgetDCMotorHandle, dataRate: f64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getDataRate(
        ch: PhidgetDCMotorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinDataRate(
        ch: PhidgetDCMotorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxDataRate(
        ch: PhidgetDCMotorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinFailsafeTime(
        ch: PhidgetDCMotorHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxFailsafeTime(
        ch: PhidgetDCMotorHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setFanMode(
        ch: PhidgetDCMotorHandle,
        fanMode: Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getFanMode(
        ch: PhidgetDCMotorHandle,
        fanMode: *mut Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setTargetBrakingStrength(
        ch: PhidgetDCMotorHandle,
        targetBrakingStrength: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getTargetBrakingStrength(
        ch: PhidgetDCMotorHandle,
        targetBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setTargetVelocity(
        ch: PhidgetDCMotorHandle,
        targetVelocity: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_setTargetVelocity_async(
        ch: PhidgetDCMotorHandle,
        targetVelocity: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetDCMotor_getTargetVelocity(
        ch: PhidgetDCMotorHandle,
        targetVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getVelocity(
        ch: PhidgetDCMotorHandle,
        velocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMinVelocity(
        ch: PhidgetDCMotorHandle,
        minVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDCMotor_getMaxVelocity(
        ch: PhidgetDCMotorHandle,
        maxVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDCMotor_OnBackEMFChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetDCMotorHandle, ctx: *mut ::std::os::raw::c_void, backEMF: f64),
>;
extern "C" {
    pub fn PhidgetDCMotor_setOnBackEMFChangeHandler(
        ch: PhidgetDCMotorHandle,
        fptr: PhidgetDCMotor_OnBackEMFChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDCMotor_OnBrakingStrengthChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDCMotorHandle,
        ctx: *mut ::std::os::raw::c_void,
        brakingStrength: f64,
    ),
>;
extern "C" {
    pub fn PhidgetDCMotor_setOnBrakingStrengthChangeHandler(
        ch: PhidgetDCMotorHandle,
        fptr: PhidgetDCMotor_OnBrakingStrengthChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDCMotor_OnVelocityUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetDCMotorHandle, ctx: *mut ::std::os::raw::c_void, velocity: f64),
>;
extern "C" {
    pub fn PhidgetDCMotor_setOnVelocityUpdateHandler(
        ch: PhidgetDCMotorHandle,
        fptr: PhidgetDCMotor_OnVelocityUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetCurrentInput {
    _unused: [u8; 0],
}
pub type PhidgetCurrentInputHandle = *mut _PhidgetCurrentInput;
extern "C" {
    pub fn PhidgetCurrentInput_create(ch: *mut PhidgetCurrentInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_delete(ch: *mut PhidgetCurrentInputHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getCurrent(
        ch: PhidgetCurrentInputHandle,
        current: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMinCurrent(
        ch: PhidgetCurrentInputHandle,
        minCurrent: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMaxCurrent(
        ch: PhidgetCurrentInputHandle,
        maxCurrent: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_setCurrentChangeTrigger(
        ch: PhidgetCurrentInputHandle,
        currentChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getCurrentChangeTrigger(
        ch: PhidgetCurrentInputHandle,
        currentChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMinCurrentChangeTrigger(
        ch: PhidgetCurrentInputHandle,
        minCurrentChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMaxCurrentChangeTrigger(
        ch: PhidgetCurrentInputHandle,
        maxCurrentChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_setDataInterval(
        ch: PhidgetCurrentInputHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getDataInterval(
        ch: PhidgetCurrentInputHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMinDataInterval(
        ch: PhidgetCurrentInputHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMaxDataInterval(
        ch: PhidgetCurrentInputHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_setDataRate(
        ch: PhidgetCurrentInputHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getDataRate(
        ch: PhidgetCurrentInputHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMinDataRate(
        ch: PhidgetCurrentInputHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getMaxDataRate(
        ch: PhidgetCurrentInputHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_setPowerSupply(
        ch: PhidgetCurrentInputHandle,
        powerSupply: Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetCurrentInput_getPowerSupply(
        ch: PhidgetCurrentInputHandle,
        powerSupply: *mut Phidget_PowerSupply,
    ) -> PhidgetReturnCode;
}
pub type PhidgetCurrentInput_OnCurrentChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetCurrentInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        current: f64,
    ),
>;
extern "C" {
    pub fn PhidgetCurrentInput_setOnCurrentChangeHandler(
        ch: PhidgetCurrentInputHandle,
        fptr: PhidgetCurrentInput_OnCurrentChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetStepper {
    _unused: [u8; 0],
}
pub type PhidgetStepperHandle = *mut _PhidgetStepper;
extern "C" {
    pub fn PhidgetStepper_create(ch: *mut PhidgetStepperHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_delete(ch: *mut PhidgetStepperHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_enableFailsafe(
        ch: PhidgetStepperHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_addPositionOffset(
        ch: PhidgetStepperHandle,
        positionOffset: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_resetFailsafe(ch: PhidgetStepperHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setAcceleration(
        ch: PhidgetStepperHandle,
        acceleration: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getAcceleration(
        ch: PhidgetStepperHandle,
        acceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinAcceleration(
        ch: PhidgetStepperHandle,
        minAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxAcceleration(
        ch: PhidgetStepperHandle,
        maxAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setControlMode(
        ch: PhidgetStepperHandle,
        controlMode: PhidgetStepper_ControlMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getControlMode(
        ch: PhidgetStepperHandle,
        controlMode: *mut PhidgetStepper_ControlMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setCurrentLimit(
        ch: PhidgetStepperHandle,
        currentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getCurrentLimit(
        ch: PhidgetStepperHandle,
        currentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinCurrentLimit(
        ch: PhidgetStepperHandle,
        minCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxCurrentLimit(
        ch: PhidgetStepperHandle,
        maxCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setDataInterval(
        ch: PhidgetStepperHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getDataInterval(
        ch: PhidgetStepperHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinDataInterval(
        ch: PhidgetStepperHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxDataInterval(
        ch: PhidgetStepperHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setDataRate(ch: PhidgetStepperHandle, dataRate: f64)
        -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getDataRate(
        ch: PhidgetStepperHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinDataRate(
        ch: PhidgetStepperHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxDataRate(
        ch: PhidgetStepperHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setEngaged(
        ch: PhidgetStepperHandle,
        engaged: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getEngaged(
        ch: PhidgetStepperHandle,
        engaged: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinFailsafeTime(
        ch: PhidgetStepperHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxFailsafeTime(
        ch: PhidgetStepperHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setHoldingCurrentLimit(
        ch: PhidgetStepperHandle,
        holdingCurrentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getHoldingCurrentLimit(
        ch: PhidgetStepperHandle,
        holdingCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getIsMoving(
        ch: PhidgetStepperHandle,
        isMoving: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getPosition(
        ch: PhidgetStepperHandle,
        position: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinPosition(
        ch: PhidgetStepperHandle,
        minPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxPosition(
        ch: PhidgetStepperHandle,
        maxPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setRescaleFactor(
        ch: PhidgetStepperHandle,
        rescaleFactor: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getRescaleFactor(
        ch: PhidgetStepperHandle,
        rescaleFactor: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setTargetPosition(
        ch: PhidgetStepperHandle,
        targetPosition: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setTargetPosition_async(
        ch: PhidgetStepperHandle,
        targetPosition: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetStepper_getTargetPosition(
        ch: PhidgetStepperHandle,
        targetPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getVelocity(
        ch: PhidgetStepperHandle,
        velocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_setVelocityLimit(
        ch: PhidgetStepperHandle,
        velocityLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getVelocityLimit(
        ch: PhidgetStepperHandle,
        velocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMinVelocityLimit(
        ch: PhidgetStepperHandle,
        minVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetStepper_getMaxVelocityLimit(
        ch: PhidgetStepperHandle,
        maxVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetStepper_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetStepperHandle, ctx: *mut ::std::os::raw::c_void, position: f64),
>;
extern "C" {
    pub fn PhidgetStepper_setOnPositionChangeHandler(
        ch: PhidgetStepperHandle,
        fptr: PhidgetStepper_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetStepper_OnStoppedCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetStepperHandle, ctx: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn PhidgetStepper_setOnStoppedHandler(
        ch: PhidgetStepperHandle,
        fptr: PhidgetStepper_OnStoppedCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetStepper_OnVelocityChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(ch: PhidgetStepperHandle, ctx: *mut ::std::os::raw::c_void, velocity: f64),
>;
extern "C" {
    pub fn PhidgetStepper_setOnVelocityChangeHandler(
        ch: PhidgetStepperHandle,
        fptr: PhidgetStepper_OnVelocityChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetLCD {
    _unused: [u8; 0],
}
pub type PhidgetLCDHandle = *mut _PhidgetLCD;
extern "C" {
    pub fn PhidgetLCD_create(ch: *mut PhidgetLCDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_delete(ch: *mut PhidgetLCDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setCharacterBitmap(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        character: *const ::std::os::raw::c_char,
        bitmap: *const u8,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setCharacterBitmap_async(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        character: *const ::std::os::raw::c_char,
        bitmap: *const u8,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_getMaxCharacters(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        maxCharacters: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_clear(ch: PhidgetLCDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_clear_async(
        ch: PhidgetLCDHandle,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_copy(
        ch: PhidgetLCDHandle,
        sourceFramebuffer: ::std::os::raw::c_int,
        destFramebuffer: ::std::os::raw::c_int,
        sourceX1: ::std::os::raw::c_int,
        sourceY1: ::std::os::raw::c_int,
        sourceX2: ::std::os::raw::c_int,
        sourceY2: ::std::os::raw::c_int,
        destX: ::std::os::raw::c_int,
        destY: ::std::os::raw::c_int,
        inverted: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_copy_async(
        ch: PhidgetLCDHandle,
        sourceFramebuffer: ::std::os::raw::c_int,
        destFramebuffer: ::std::os::raw::c_int,
        sourceX1: ::std::os::raw::c_int,
        sourceY1: ::std::os::raw::c_int,
        sourceX2: ::std::os::raw::c_int,
        sourceY2: ::std::os::raw::c_int,
        destX: ::std::os::raw::c_int,
        destY: ::std::os::raw::c_int,
        inverted: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_drawLine(
        ch: PhidgetLCDHandle,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_drawLine_async(
        ch: PhidgetLCDHandle,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_drawPixel(
        ch: PhidgetLCDHandle,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixelState: PhidgetLCD_PixelState,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_drawPixel_async(
        ch: PhidgetLCDHandle,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixelState: PhidgetLCD_PixelState,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_drawRect(
        ch: PhidgetLCDHandle,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        filled: ::std::os::raw::c_int,
        inverted: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_drawRect_async(
        ch: PhidgetLCDHandle,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        filled: ::std::os::raw::c_int,
        inverted: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_flush(ch: PhidgetLCDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_flush_async(
        ch: PhidgetLCDHandle,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_getFontSize(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setFontSize(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_initialize(ch: PhidgetLCDHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_saveFrameBuffer(
        ch: PhidgetLCDHandle,
        frameBuffer: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_saveFrameBuffer_async(
        ch: PhidgetLCDHandle,
        frameBuffer: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_writeBitmap(
        ch: PhidgetLCDHandle,
        xPosition: ::std::os::raw::c_int,
        yPosition: ::std::os::raw::c_int,
        xSize: ::std::os::raw::c_int,
        ySize: ::std::os::raw::c_int,
        bitmap: *const u8,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_writeBitmap_async(
        ch: PhidgetLCDHandle,
        xPosition: ::std::os::raw::c_int,
        yPosition: ::std::os::raw::c_int,
        xSize: ::std::os::raw::c_int,
        ySize: ::std::os::raw::c_int,
        bitmap: *const u8,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_writeText(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        xPosition: ::std::os::raw::c_int,
        yPosition: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_writeText_async(
        ch: PhidgetLCDHandle,
        font: PhidgetLCD_Font,
        xPosition: ::std::os::raw::c_int,
        yPosition: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_setAutoFlush(
        ch: PhidgetLCDHandle,
        autoFlush: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getAutoFlush(
        ch: PhidgetLCDHandle,
        autoFlush: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setBacklight(ch: PhidgetLCDHandle, backlight: f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getBacklight(ch: PhidgetLCDHandle, backlight: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getMinBacklight(
        ch: PhidgetLCDHandle,
        minBacklight: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getMaxBacklight(
        ch: PhidgetLCDHandle,
        maxBacklight: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setContrast(ch: PhidgetLCDHandle, contrast: f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getContrast(ch: PhidgetLCDHandle, contrast: *mut f64) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getMinContrast(
        ch: PhidgetLCDHandle,
        minContrast: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getMaxContrast(
        ch: PhidgetLCDHandle,
        maxContrast: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setCursorBlink(
        ch: PhidgetLCDHandle,
        cursorBlink: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getCursorBlink(
        ch: PhidgetLCDHandle,
        cursorBlink: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setCursorOn(
        ch: PhidgetLCDHandle,
        cursorOn: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getCursorOn(
        ch: PhidgetLCDHandle,
        cursorOn: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setFrameBuffer(
        ch: PhidgetLCDHandle,
        frameBuffer: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setFrameBuffer_async(
        ch: PhidgetLCDHandle,
        frameBuffer: ::std::os::raw::c_int,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetLCD_getFrameBuffer(
        ch: PhidgetLCDHandle,
        frameBuffer: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getHeight(
        ch: PhidgetLCDHandle,
        height: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setScreenSize(
        ch: PhidgetLCDHandle,
        screenSize: PhidgetLCD_ScreenSize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getScreenSize(
        ch: PhidgetLCDHandle,
        screenSize: *mut PhidgetLCD_ScreenSize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_setSleeping(
        ch: PhidgetLCDHandle,
        sleeping: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getSleeping(
        ch: PhidgetLCDHandle,
        sleeping: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLCD_getWidth(
        ch: PhidgetLCDHandle,
        width: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetMotorPositionController {
    _unused: [u8; 0],
}
pub type PhidgetMotorPositionControllerHandle = *mut _PhidgetMotorPositionController;
extern "C" {
    pub fn PhidgetMotorPositionController_create(
        ch: *mut PhidgetMotorPositionControllerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_delete(
        ch: *mut PhidgetMotorPositionControllerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_enableFailsafe(
        ch: PhidgetMotorPositionControllerHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_addPositionOffset(
        ch: PhidgetMotorPositionControllerHandle,
        positionOffset: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_resetFailsafe(
        ch: PhidgetMotorPositionControllerHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setAcceleration(
        ch: PhidgetMotorPositionControllerHandle,
        acceleration: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getAcceleration(
        ch: PhidgetMotorPositionControllerHandle,
        acceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinAcceleration(
        ch: PhidgetMotorPositionControllerHandle,
        minAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxAcceleration(
        ch: PhidgetMotorPositionControllerHandle,
        maxAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setCurrentLimit(
        ch: PhidgetMotorPositionControllerHandle,
        currentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getCurrentLimit(
        ch: PhidgetMotorPositionControllerHandle,
        currentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinCurrentLimit(
        ch: PhidgetMotorPositionControllerHandle,
        minCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxCurrentLimit(
        ch: PhidgetMotorPositionControllerHandle,
        maxCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setCurrentRegulatorGain(
        ch: PhidgetMotorPositionControllerHandle,
        currentRegulatorGain: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getCurrentRegulatorGain(
        ch: PhidgetMotorPositionControllerHandle,
        currentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinCurrentRegulatorGain(
        ch: PhidgetMotorPositionControllerHandle,
        minCurrentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxCurrentRegulatorGain(
        ch: PhidgetMotorPositionControllerHandle,
        maxCurrentRegulatorGain: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setDataInterval(
        ch: PhidgetMotorPositionControllerHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getDataInterval(
        ch: PhidgetMotorPositionControllerHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinDataInterval(
        ch: PhidgetMotorPositionControllerHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxDataInterval(
        ch: PhidgetMotorPositionControllerHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setDataRate(
        ch: PhidgetMotorPositionControllerHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getDataRate(
        ch: PhidgetMotorPositionControllerHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinDataRate(
        ch: PhidgetMotorPositionControllerHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxDataRate(
        ch: PhidgetMotorPositionControllerHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setDeadBand(
        ch: PhidgetMotorPositionControllerHandle,
        deadBand: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getDeadBand(
        ch: PhidgetMotorPositionControllerHandle,
        deadBand: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getDutyCycle(
        ch: PhidgetMotorPositionControllerHandle,
        dutyCycle: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setEngaged(
        ch: PhidgetMotorPositionControllerHandle,
        engaged: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getEngaged(
        ch: PhidgetMotorPositionControllerHandle,
        engaged: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinFailsafeTime(
        ch: PhidgetMotorPositionControllerHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxFailsafeTime(
        ch: PhidgetMotorPositionControllerHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setFanMode(
        ch: PhidgetMotorPositionControllerHandle,
        fanMode: Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getFanMode(
        ch: PhidgetMotorPositionControllerHandle,
        fanMode: *mut Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setIOMode(
        ch: PhidgetMotorPositionControllerHandle,
        IOMode: Phidget_EncoderIOMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getIOMode(
        ch: PhidgetMotorPositionControllerHandle,
        IOMode: *mut Phidget_EncoderIOMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setKd(
        ch: PhidgetMotorPositionControllerHandle,
        kd: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getKd(
        ch: PhidgetMotorPositionControllerHandle,
        kd: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setKi(
        ch: PhidgetMotorPositionControllerHandle,
        ki: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getKi(
        ch: PhidgetMotorPositionControllerHandle,
        ki: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setKp(
        ch: PhidgetMotorPositionControllerHandle,
        kp: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getKp(
        ch: PhidgetMotorPositionControllerHandle,
        kp: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getPosition(
        ch: PhidgetMotorPositionControllerHandle,
        position: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinPosition(
        ch: PhidgetMotorPositionControllerHandle,
        minPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxPosition(
        ch: PhidgetMotorPositionControllerHandle,
        maxPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setRescaleFactor(
        ch: PhidgetMotorPositionControllerHandle,
        rescaleFactor: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getRescaleFactor(
        ch: PhidgetMotorPositionControllerHandle,
        rescaleFactor: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setStallVelocity(
        ch: PhidgetMotorPositionControllerHandle,
        stallVelocity: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getStallVelocity(
        ch: PhidgetMotorPositionControllerHandle,
        stallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinStallVelocity(
        ch: PhidgetMotorPositionControllerHandle,
        minStallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxStallVelocity(
        ch: PhidgetMotorPositionControllerHandle,
        maxStallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setTargetPosition(
        ch: PhidgetMotorPositionControllerHandle,
        targetPosition: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setTargetPosition_async(
        ch: PhidgetMotorPositionControllerHandle,
        targetPosition: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetMotorPositionController_getTargetPosition(
        ch: PhidgetMotorPositionControllerHandle,
        targetPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_setVelocityLimit(
        ch: PhidgetMotorPositionControllerHandle,
        velocityLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getVelocityLimit(
        ch: PhidgetMotorPositionControllerHandle,
        velocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMinVelocityLimit(
        ch: PhidgetMotorPositionControllerHandle,
        minVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetMotorPositionController_getMaxVelocityLimit(
        ch: PhidgetMotorPositionControllerHandle,
        maxVelocityLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetMotorPositionController_OnDutyCycleUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetMotorPositionControllerHandle,
        ctx: *mut ::std::os::raw::c_void,
        dutyCycle: f64,
    ),
>;
extern "C" {
    pub fn PhidgetMotorPositionController_setOnDutyCycleUpdateHandler(
        ch: PhidgetMotorPositionControllerHandle,
        fptr: PhidgetMotorPositionController_OnDutyCycleUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetMotorPositionController_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetMotorPositionControllerHandle,
        ctx: *mut ::std::os::raw::c_void,
        position: f64,
    ),
>;
extern "C" {
    pub fn PhidgetMotorPositionController_setOnPositionChangeHandler(
        ch: PhidgetMotorPositionControllerHandle,
        fptr: PhidgetMotorPositionController_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetBLDCMotor {
    _unused: [u8; 0],
}
pub type PhidgetBLDCMotorHandle = *mut _PhidgetBLDCMotor;
extern "C" {
    pub fn PhidgetBLDCMotor_create(ch: *mut PhidgetBLDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_delete(ch: *mut PhidgetBLDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_enableFailsafe(
        ch: PhidgetBLDCMotorHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_addPositionOffset(
        ch: PhidgetBLDCMotorHandle,
        positionOffset: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_resetFailsafe(ch: PhidgetBLDCMotorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setAcceleration(
        ch: PhidgetBLDCMotorHandle,
        acceleration: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getAcceleration(
        ch: PhidgetBLDCMotorHandle,
        acceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinAcceleration(
        ch: PhidgetBLDCMotorHandle,
        minAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxAcceleration(
        ch: PhidgetBLDCMotorHandle,
        maxAcceleration: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getBrakingStrength(
        ch: PhidgetBLDCMotorHandle,
        brakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinBrakingStrength(
        ch: PhidgetBLDCMotorHandle,
        minBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxBrakingStrength(
        ch: PhidgetBLDCMotorHandle,
        maxBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setCurrentLimit(
        ch: PhidgetBLDCMotorHandle,
        currentLimit: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getCurrentLimit(
        ch: PhidgetBLDCMotorHandle,
        currentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinCurrentLimit(
        ch: PhidgetBLDCMotorHandle,
        minCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxCurrentLimit(
        ch: PhidgetBLDCMotorHandle,
        maxCurrentLimit: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setDataInterval(
        ch: PhidgetBLDCMotorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getDataInterval(
        ch: PhidgetBLDCMotorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinDataInterval(
        ch: PhidgetBLDCMotorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxDataInterval(
        ch: PhidgetBLDCMotorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setDataRate(
        ch: PhidgetBLDCMotorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getDataRate(
        ch: PhidgetBLDCMotorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinDataRate(
        ch: PhidgetBLDCMotorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxDataRate(
        ch: PhidgetBLDCMotorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinFailsafeTime(
        ch: PhidgetBLDCMotorHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxFailsafeTime(
        ch: PhidgetBLDCMotorHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getPosition(
        ch: PhidgetBLDCMotorHandle,
        position: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinPosition(
        ch: PhidgetBLDCMotorHandle,
        minPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxPosition(
        ch: PhidgetBLDCMotorHandle,
        maxPosition: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setRescaleFactor(
        ch: PhidgetBLDCMotorHandle,
        rescaleFactor: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getRescaleFactor(
        ch: PhidgetBLDCMotorHandle,
        rescaleFactor: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setStallVelocity(
        ch: PhidgetBLDCMotorHandle,
        stallVelocity: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getStallVelocity(
        ch: PhidgetBLDCMotorHandle,
        stallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinStallVelocity(
        ch: PhidgetBLDCMotorHandle,
        minStallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxStallVelocity(
        ch: PhidgetBLDCMotorHandle,
        maxStallVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setTargetBrakingStrength(
        ch: PhidgetBLDCMotorHandle,
        targetBrakingStrength: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getTargetBrakingStrength(
        ch: PhidgetBLDCMotorHandle,
        targetBrakingStrength: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setTargetVelocity(
        ch: PhidgetBLDCMotorHandle,
        targetVelocity: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_setTargetVelocity_async(
        ch: PhidgetBLDCMotorHandle,
        targetVelocity: f64,
        fptr: Phidget_AsyncCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PhidgetBLDCMotor_getTargetVelocity(
        ch: PhidgetBLDCMotorHandle,
        targetVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getVelocity(
        ch: PhidgetBLDCMotorHandle,
        velocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMinVelocity(
        ch: PhidgetBLDCMotorHandle,
        minVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetBLDCMotor_getMaxVelocity(
        ch: PhidgetBLDCMotorHandle,
        maxVelocity: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetBLDCMotor_OnBrakingStrengthChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetBLDCMotorHandle,
        ctx: *mut ::std::os::raw::c_void,
        brakingStrength: f64,
    ),
>;
extern "C" {
    pub fn PhidgetBLDCMotor_setOnBrakingStrengthChangeHandler(
        ch: PhidgetBLDCMotorHandle,
        fptr: PhidgetBLDCMotor_OnBrakingStrengthChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetBLDCMotor_OnPositionChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetBLDCMotorHandle,
        ctx: *mut ::std::os::raw::c_void,
        position: f64,
    ),
>;
extern "C" {
    pub fn PhidgetBLDCMotor_setOnPositionChangeHandler(
        ch: PhidgetBLDCMotorHandle,
        fptr: PhidgetBLDCMotor_OnPositionChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetBLDCMotor_OnVelocityUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetBLDCMotorHandle,
        ctx: *mut ::std::os::raw::c_void,
        velocity: f64,
    ),
>;
extern "C" {
    pub fn PhidgetBLDCMotor_setOnVelocityUpdateHandler(
        ch: PhidgetBLDCMotorHandle,
        fptr: PhidgetBLDCMotor_OnVelocityUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetDistanceSensor {
    _unused: [u8; 0],
}
pub type PhidgetDistanceSensorHandle = *mut _PhidgetDistanceSensor;
extern "C" {
    pub fn PhidgetDistanceSensor_create(ch: *mut PhidgetDistanceSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_delete(ch: *mut PhidgetDistanceSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getSonarReflections(
        ch: PhidgetDistanceSensorHandle,
        distances: *mut [u32; 8usize],
        amplitudes: *mut [u32; 8usize],
        count: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_setDataInterval(
        ch: PhidgetDistanceSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getDataInterval(
        ch: PhidgetDistanceSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMinDataInterval(
        ch: PhidgetDistanceSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMaxDataInterval(
        ch: PhidgetDistanceSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_setDataRate(
        ch: PhidgetDistanceSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getDataRate(
        ch: PhidgetDistanceSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMinDataRate(
        ch: PhidgetDistanceSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMaxDataRate(
        ch: PhidgetDistanceSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getDistance(
        ch: PhidgetDistanceSensorHandle,
        distance: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMinDistance(
        ch: PhidgetDistanceSensorHandle,
        minDistance: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMaxDistance(
        ch: PhidgetDistanceSensorHandle,
        maxDistance: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_setDistanceChangeTrigger(
        ch: PhidgetDistanceSensorHandle,
        distanceChangeTrigger: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getDistanceChangeTrigger(
        ch: PhidgetDistanceSensorHandle,
        distanceChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMinDistanceChangeTrigger(
        ch: PhidgetDistanceSensorHandle,
        minDistanceChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getMaxDistanceChangeTrigger(
        ch: PhidgetDistanceSensorHandle,
        maxDistanceChangeTrigger: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_setSonarQuietMode(
        ch: PhidgetDistanceSensorHandle,
        sonarQuietMode: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDistanceSensor_getSonarQuietMode(
        ch: PhidgetDistanceSensorHandle,
        sonarQuietMode: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDistanceSensor_OnDistanceChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDistanceSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        distance: u32,
    ),
>;
extern "C" {
    pub fn PhidgetDistanceSensor_setOnDistanceChangeHandler(
        ch: PhidgetDistanceSensorHandle,
        fptr: PhidgetDistanceSensor_OnDistanceChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDistanceSensor_OnSonarReflectionsUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDistanceSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        distances: *const u32,
        amplitudes: *const u32,
        count: u32,
    ),
>;
extern "C" {
    pub fn PhidgetDistanceSensor_setOnSonarReflectionsUpdateHandler(
        ch: PhidgetDistanceSensorHandle,
        fptr: PhidgetDistanceSensor_OnSonarReflectionsUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetHumiditySensor {
    _unused: [u8; 0],
}
pub type PhidgetHumiditySensorHandle = *mut _PhidgetHumiditySensor;
extern "C" {
    pub fn PhidgetHumiditySensor_create(ch: *mut PhidgetHumiditySensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_delete(ch: *mut PhidgetHumiditySensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_setDataInterval(
        ch: PhidgetHumiditySensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getDataInterval(
        ch: PhidgetHumiditySensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMinDataInterval(
        ch: PhidgetHumiditySensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMaxDataInterval(
        ch: PhidgetHumiditySensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_setDataRate(
        ch: PhidgetHumiditySensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getDataRate(
        ch: PhidgetHumiditySensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMinDataRate(
        ch: PhidgetHumiditySensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMaxDataRate(
        ch: PhidgetHumiditySensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getHumidity(
        ch: PhidgetHumiditySensorHandle,
        humidity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMinHumidity(
        ch: PhidgetHumiditySensorHandle,
        minHumidity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMaxHumidity(
        ch: PhidgetHumiditySensorHandle,
        maxHumidity: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_setHumidityChangeTrigger(
        ch: PhidgetHumiditySensorHandle,
        humidityChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getHumidityChangeTrigger(
        ch: PhidgetHumiditySensorHandle,
        humidityChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMinHumidityChangeTrigger(
        ch: PhidgetHumiditySensorHandle,
        minHumidityChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHumiditySensor_getMaxHumidityChangeTrigger(
        ch: PhidgetHumiditySensorHandle,
        maxHumidityChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetHumiditySensor_OnHumidityChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetHumiditySensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        humidity: f64,
    ),
>;
extern "C" {
    pub fn PhidgetHumiditySensor_setOnHumidityChangeHandler(
        ch: PhidgetHumiditySensorHandle,
        fptr: PhidgetHumiditySensor_OnHumidityChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetLightSensor {
    _unused: [u8; 0],
}
pub type PhidgetLightSensorHandle = *mut _PhidgetLightSensor;
extern "C" {
    pub fn PhidgetLightSensor_create(ch: *mut PhidgetLightSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_delete(ch: *mut PhidgetLightSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_setDataInterval(
        ch: PhidgetLightSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getDataInterval(
        ch: PhidgetLightSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMinDataInterval(
        ch: PhidgetLightSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMaxDataInterval(
        ch: PhidgetLightSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_setDataRate(
        ch: PhidgetLightSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getDataRate(
        ch: PhidgetLightSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMinDataRate(
        ch: PhidgetLightSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMaxDataRate(
        ch: PhidgetLightSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getIlluminance(
        ch: PhidgetLightSensorHandle,
        illuminance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMinIlluminance(
        ch: PhidgetLightSensorHandle,
        minIlluminance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMaxIlluminance(
        ch: PhidgetLightSensorHandle,
        maxIlluminance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_setIlluminanceChangeTrigger(
        ch: PhidgetLightSensorHandle,
        illuminanceChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getIlluminanceChangeTrigger(
        ch: PhidgetLightSensorHandle,
        illuminanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMinIlluminanceChangeTrigger(
        ch: PhidgetLightSensorHandle,
        minIlluminanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetLightSensor_getMaxIlluminanceChangeTrigger(
        ch: PhidgetLightSensorHandle,
        maxIlluminanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetLightSensor_OnIlluminanceChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetLightSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        illuminance: f64,
    ),
>;
extern "C" {
    pub fn PhidgetLightSensor_setOnIlluminanceChangeHandler(
        ch: PhidgetLightSensorHandle,
        fptr: PhidgetLightSensor_OnIlluminanceChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetPressureSensor {
    _unused: [u8; 0],
}
pub type PhidgetPressureSensorHandle = *mut _PhidgetPressureSensor;
extern "C" {
    pub fn PhidgetPressureSensor_create(ch: *mut PhidgetPressureSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_delete(ch: *mut PhidgetPressureSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_setDataInterval(
        ch: PhidgetPressureSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getDataInterval(
        ch: PhidgetPressureSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMinDataInterval(
        ch: PhidgetPressureSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMaxDataInterval(
        ch: PhidgetPressureSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_setDataRate(
        ch: PhidgetPressureSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getDataRate(
        ch: PhidgetPressureSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMinDataRate(
        ch: PhidgetPressureSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMaxDataRate(
        ch: PhidgetPressureSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getPressure(
        ch: PhidgetPressureSensorHandle,
        pressure: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMinPressure(
        ch: PhidgetPressureSensorHandle,
        minPressure: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMaxPressure(
        ch: PhidgetPressureSensorHandle,
        maxPressure: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_setPressureChangeTrigger(
        ch: PhidgetPressureSensorHandle,
        pressureChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getPressureChangeTrigger(
        ch: PhidgetPressureSensorHandle,
        pressureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMinPressureChangeTrigger(
        ch: PhidgetPressureSensorHandle,
        minPressureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPressureSensor_getMaxPressureChangeTrigger(
        ch: PhidgetPressureSensorHandle,
        maxPressureChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
pub type PhidgetPressureSensor_OnPressureChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetPressureSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        pressure: f64,
    ),
>;
extern "C" {
    pub fn PhidgetPressureSensor_setOnPressureChangeHandler(
        ch: PhidgetPressureSensorHandle,
        fptr: PhidgetPressureSensor_OnPressureChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetResistanceInput {
    _unused: [u8; 0],
}
pub type PhidgetResistanceInputHandle = *mut _PhidgetResistanceInput;
extern "C" {
    pub fn PhidgetResistanceInput_create(
        ch: *mut PhidgetResistanceInputHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_delete(
        ch: *mut PhidgetResistanceInputHandle,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_setDataInterval(
        ch: PhidgetResistanceInputHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getDataInterval(
        ch: PhidgetResistanceInputHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMinDataInterval(
        ch: PhidgetResistanceInputHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMaxDataInterval(
        ch: PhidgetResistanceInputHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_setDataRate(
        ch: PhidgetResistanceInputHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getDataRate(
        ch: PhidgetResistanceInputHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMinDataRate(
        ch: PhidgetResistanceInputHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMaxDataRate(
        ch: PhidgetResistanceInputHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getResistance(
        ch: PhidgetResistanceInputHandle,
        resistance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMinResistance(
        ch: PhidgetResistanceInputHandle,
        minResistance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMaxResistance(
        ch: PhidgetResistanceInputHandle,
        maxResistance: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_setResistanceChangeTrigger(
        ch: PhidgetResistanceInputHandle,
        resistanceChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getResistanceChangeTrigger(
        ch: PhidgetResistanceInputHandle,
        resistanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMinResistanceChangeTrigger(
        ch: PhidgetResistanceInputHandle,
        minResistanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getMaxResistanceChangeTrigger(
        ch: PhidgetResistanceInputHandle,
        maxResistanceChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_setRTDWireSetup(
        ch: PhidgetResistanceInputHandle,
        RTDWireSetup: Phidget_RTDWireSetup,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetResistanceInput_getRTDWireSetup(
        ch: PhidgetResistanceInputHandle,
        RTDWireSetup: *mut Phidget_RTDWireSetup,
    ) -> PhidgetReturnCode;
}
pub type PhidgetResistanceInput_OnResistanceChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetResistanceInputHandle,
        ctx: *mut ::std::os::raw::c_void,
        resistance: f64,
    ),
>;
extern "C" {
    pub fn PhidgetResistanceInput_setOnResistanceChangeHandler(
        ch: PhidgetResistanceInputHandle,
        fptr: PhidgetResistanceInput_OnResistanceChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetPowerGuard {
    _unused: [u8; 0],
}
pub type PhidgetPowerGuardHandle = *mut _PhidgetPowerGuard;
extern "C" {
    pub fn PhidgetPowerGuard_create(ch: *mut PhidgetPowerGuardHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_delete(ch: *mut PhidgetPowerGuardHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_enableFailsafe(
        ch: PhidgetPowerGuardHandle,
        failsafeTime: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_resetFailsafe(ch: PhidgetPowerGuardHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getMinFailsafeTime(
        ch: PhidgetPowerGuardHandle,
        minFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getMaxFailsafeTime(
        ch: PhidgetPowerGuardHandle,
        maxFailsafeTime: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_setFanMode(
        ch: PhidgetPowerGuardHandle,
        fanMode: Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getFanMode(
        ch: PhidgetPowerGuardHandle,
        fanMode: *mut Phidget_FanMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_setOverVoltage(
        ch: PhidgetPowerGuardHandle,
        overVoltage: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getOverVoltage(
        ch: PhidgetPowerGuardHandle,
        overVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getMinOverVoltage(
        ch: PhidgetPowerGuardHandle,
        minOverVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getMaxOverVoltage(
        ch: PhidgetPowerGuardHandle,
        maxOverVoltage: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_setPowerEnabled(
        ch: PhidgetPowerGuardHandle,
        powerEnabled: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetPowerGuard_getPowerEnabled(
        ch: PhidgetPowerGuardHandle,
        powerEnabled: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetSoundSensor {
    _unused: [u8; 0],
}
pub type PhidgetSoundSensorHandle = *mut _PhidgetSoundSensor;
extern "C" {
    pub fn PhidgetSoundSensor_create(ch: *mut PhidgetSoundSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_delete(ch: *mut PhidgetSoundSensorHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_setDataInterval(
        ch: PhidgetSoundSensorHandle,
        dataInterval: u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getDataInterval(
        ch: PhidgetSoundSensorHandle,
        dataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMinDataInterval(
        ch: PhidgetSoundSensorHandle,
        minDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMaxDataInterval(
        ch: PhidgetSoundSensorHandle,
        maxDataInterval: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_setDataRate(
        ch: PhidgetSoundSensorHandle,
        dataRate: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getDataRate(
        ch: PhidgetSoundSensorHandle,
        dataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMinDataRate(
        ch: PhidgetSoundSensorHandle,
        minDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMaxDataRate(
        ch: PhidgetSoundSensorHandle,
        maxDataRate: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getdB(
        ch: PhidgetSoundSensorHandle,
        dB: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMaxdB(
        ch: PhidgetSoundSensorHandle,
        maxdB: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getdBA(
        ch: PhidgetSoundSensorHandle,
        dBA: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getdBC(
        ch: PhidgetSoundSensorHandle,
        dBC: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getNoiseFloor(
        ch: PhidgetSoundSensorHandle,
        noiseFloor: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getOctaves(
        ch: PhidgetSoundSensorHandle,
        octaves: *mut [f64; 10usize],
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_setSPLChangeTrigger(
        ch: PhidgetSoundSensorHandle,
        SPLChangeTrigger: f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getSPLChangeTrigger(
        ch: PhidgetSoundSensorHandle,
        SPLChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMinSPLChangeTrigger(
        ch: PhidgetSoundSensorHandle,
        minSPLChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getMaxSPLChangeTrigger(
        ch: PhidgetSoundSensorHandle,
        maxSPLChangeTrigger: *mut f64,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_setSPLRange(
        ch: PhidgetSoundSensorHandle,
        SPLRange: PhidgetSoundSensor_SPLRange,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetSoundSensor_getSPLRange(
        ch: PhidgetSoundSensorHandle,
        SPLRange: *mut PhidgetSoundSensor_SPLRange,
    ) -> PhidgetReturnCode;
}
pub type PhidgetSoundSensor_OnSPLChangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetSoundSensorHandle,
        ctx: *mut ::std::os::raw::c_void,
        dB: f64,
        dBA: f64,
        dBC: f64,
        octaves: *const f64,
    ),
>;
extern "C" {
    pub fn PhidgetSoundSensor_setOnSPLChangeHandler(
        ch: PhidgetSoundSensorHandle,
        fptr: PhidgetSoundSensor_OnSPLChangeCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetHub {
    _unused: [u8; 0],
}
pub type PhidgetHubHandle = *mut _PhidgetHub;
extern "C" {
    pub fn PhidgetHub_create(ch: *mut PhidgetHubHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_delete(ch: *mut PhidgetHubHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_setPortAutoSetSpeed(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_getPortMaxSpeed(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: *mut u32,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_getPortMode(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        mode: *mut PhidgetHub_PortMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_setPortMode(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        mode: PhidgetHub_PortMode,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_getPortPower(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_setPortPower(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_getPortSupportsAutoSetSpeed(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetHub_getPortSupportsSetSpeed(
        ch: PhidgetHubHandle,
        port: ::std::os::raw::c_int,
        state: *mut ::std::os::raw::c_int,
    ) -> PhidgetReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PhidgetDictionary {
    _unused: [u8; 0],
}
pub type PhidgetDictionaryHandle = *mut _PhidgetDictionary;
extern "C" {
    pub fn PhidgetDictionary_create(ch: *mut PhidgetDictionaryHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_delete(ch: *mut PhidgetDictionaryHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_add(
        ch: PhidgetDictionaryHandle,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_removeAll(ch: PhidgetDictionaryHandle) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_get(
        ch: PhidgetDictionaryHandle,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        valueLen: usize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_remove(
        ch: PhidgetDictionaryHandle,
        key: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_scan(
        ch: PhidgetDictionaryHandle,
        start: *const ::std::os::raw::c_char,
        keyList: *mut ::std::os::raw::c_char,
        keyListLen: usize,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_set(
        ch: PhidgetDictionaryHandle,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
extern "C" {
    pub fn PhidgetDictionary_update(
        ch: PhidgetDictionaryHandle,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDictionary_OnAddCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDictionaryHandle,
        ctx: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PhidgetDictionary_setOnAddHandler(
        ch: PhidgetDictionaryHandle,
        fptr: PhidgetDictionary_OnAddCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDictionary_OnRemoveCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDictionaryHandle,
        ctx: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PhidgetDictionary_setOnRemoveHandler(
        ch: PhidgetDictionaryHandle,
        fptr: PhidgetDictionary_OnRemoveCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type PhidgetDictionary_OnUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ch: PhidgetDictionaryHandle,
        ctx: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PhidgetDictionary_setOnUpdateHandler(
        ch: PhidgetDictionaryHandle,
        fptr: PhidgetDictionary_OnUpdateCallback,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PhidgetReturnCode;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
